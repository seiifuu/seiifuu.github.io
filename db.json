{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/CHANGELOG.md","path":"lib/pjax/CHANGELOG.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/LICENSE","path":"lib/pjax/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/README.md","path":"lib/pjax/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/index.d.ts","path":"lib/pjax/index.d.ts","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/index.js","path":"lib/pjax/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/package.json","path":"lib/pjax/package.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/pjax.js","path":"lib/pjax/pjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/pjax.min.js","path":"lib/pjax/pjax.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/example.js","path":"lib/pjax/example/example.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/forms.html","path":"lib/pjax/example/forms.html","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/index.html","path":"lib/pjax/example/index.html","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/page2.html","path":"lib/pjax/example/page2.html","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/page3.html","path":"lib/pjax/example/page3.html","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/abort-request.js","path":"lib/pjax/lib/abort-request.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/eval-script.js","path":"lib/pjax/lib/eval-script.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/execute-scripts.js","path":"lib/pjax/lib/execute-scripts.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/foreach-els.js","path":"lib/pjax/lib/foreach-els.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/foreach-selectors.js","path":"lib/pjax/lib/foreach-selectors.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/is-supported.js","path":"lib/pjax/lib/is-supported.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/parse-options.js","path":"lib/pjax/lib/parse-options.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/send-request.js","path":"lib/pjax/lib/send-request.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/switches-selectors.js","path":"lib/pjax/lib/switches-selectors.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/switches.js","path":"lib/pjax/lib/switches.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/uniqueid.js","path":"lib/pjax/lib/uniqueid.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/setup.js","path":"lib/pjax/tests/setup.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/test.ts","path":"lib/pjax/tests/test.ts","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/events/off.js","path":"lib/pjax/lib/events/off.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/events/on.js","path":"lib/pjax/lib/events/on.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/events/trigger.js","path":"lib/pjax/lib/events/trigger.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-form.js","path":"lib/pjax/lib/proto/attach-form.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-link.js","path":"lib/pjax/lib/proto/attach-link.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/handle-response.js","path":"lib/pjax/lib/proto/handle-response.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/log.js","path":"lib/pjax/lib/proto/log.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/parse-element.js","path":"lib/pjax/lib/proto/parse-element.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/clone.js","path":"lib/pjax/lib/util/clone.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/contains.js","path":"lib/pjax/lib/util/contains.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/extend.js","path":"lib/pjax/lib/util/extend.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/noop.js","path":"lib/pjax/lib/util/noop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/update-query-string.js","path":"lib/pjax/lib/util/update-query-string.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/abort-request.js","path":"lib/pjax/tests/lib/abort-request.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/eval-scripts.js","path":"lib/pjax/tests/lib/eval-scripts.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/events.js","path":"lib/pjax/tests/lib/events.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/execute-scripts.js","path":"lib/pjax/tests/lib/execute-scripts.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-els.js","path":"lib/pjax/tests/lib/foreach-els.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-selectors.js","path":"lib/pjax/tests/lib/foreach-selectors.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/is-supported.js","path":"lib/pjax/tests/lib/is-supported.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/parse-options.js","path":"lib/pjax/tests/lib/parse-options.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/send-request.js","path":"lib/pjax/tests/lib/send-request.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/switch-selectors.js","path":"lib/pjax/tests/lib/switch-selectors.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/switches.js","path":"lib/pjax/tests/lib/switches.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/uniqueid.js","path":"lib/pjax/tests/lib/uniqueid.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-form.js","path":"lib/pjax/tests/lib/proto/attach-form.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-link.js","path":"lib/pjax/tests/lib/proto/attach-link.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/handle-response.js","path":"lib/pjax/tests/lib/proto/handle-response.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/parse-element.js","path":"lib/pjax/tests/lib/proto/parse-element.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/clone.js","path":"lib/pjax/tests/lib/util/clone.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/contains.js","path":"lib/pjax/tests/lib/util/contains.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/extend.js","path":"lib/pjax/tests/lib/util/extend.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/noop.js","path":"lib/pjax/tests/lib/util/noop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/update-query-string.js","path":"lib/pjax/tests/lib/util/update-query-string.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar0.jpg","path":"images/avatar0.jpg","modified":1,"renderable":1},{"_id":"source/images/test","path":"images/test","modified":1,"renderable":0},{"_id":"source/images/20190212211055433.jpg","path":"images/20190212211055433.jpg","modified":1,"renderable":0},{"_id":"source/images/FAC1.png","path":"images/FAC1.png","modified":1,"renderable":0},{"_id":"source/images/FAC2.png","path":"images/FAC2.png","modified":1,"renderable":0},{"_id":"source/images/FACt1.png","path":"images/FACt1.png","modified":1,"renderable":0},{"_id":"source/images/df.png","path":"images/df.png","modified":1,"renderable":0},{"_id":"source/images/f1.png","path":"images/f1.png","modified":1,"renderable":0},{"_id":"source/images/f2.png","path":"images/f2.png","modified":1,"renderable":0},{"_id":"source/images/f3.png","path":"images/f3.png","modified":1,"renderable":0},{"_id":"source/images/f4.png","path":"images/f4.png","modified":1,"renderable":0},{"_id":"source/images/f5.png","path":"images/f5.png","modified":1,"renderable":0},{"_id":"source/images/f6.png","path":"images/f6.png","modified":1,"renderable":0},{"_id":"source/images/f7.png","path":"images/f7.png","modified":1,"renderable":0},{"_id":"source/images/fa6.png","path":"images/fa6.png","modified":1,"renderable":0},{"_id":"source/images/sf6.png","path":"images/sf6.png","modified":1,"renderable":0}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1579066663906},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1579066663906},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1579066663906},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1579066663906},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1579066663906},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1579066663906},{"_id":"source/_posts/hello-world.md","hash":"34c164a6d0147e16efdc4eba7e05d8ff67ede88e","modified":1579073681134},{"_id":"source/_posts/test-my-site.md","hash":"e62cf3fdfb5819af9239d6edc541f69d161b4547","modified":1579067700995},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1579066663906},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1579066663906},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1579066663906},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1579066663906},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1579066663906},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1579066663906},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1579066663906},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1579066663906},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1579066663906},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1579066663906},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1579066663906},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1579066663906},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1579066663906},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1579066663906},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1579066663906},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1579066663906},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1579066663906},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1579066663906},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1579066663906},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1579066663906},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1579066663906},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1579066663906},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1579066663906},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1579066663906},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1579066663906},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1579066663906},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1579066663906},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1579066663906},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1579066663906},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1579066663906},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1579066663906},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1579066663906},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1579066663906},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1579066663906},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1579066663906},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1579066663906},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1579066663906},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1579066663910},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1579066663914},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1579066663914},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1579066663914},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1579066663914},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1579066663914},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1579066663914},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1579066663914},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1579066663914},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1579066663914},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1579066663914},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1579066663914},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1579066663906},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1579066663906},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1579066663906},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1579066663906},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1579066663906},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1579066663906},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1579066663906},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1579066663906},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1579066663906},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1579066663910},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1579066663910},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1579066663910},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1579066663910},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1579066663910},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1579066663910},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1579066663910},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1579066663910},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1579066663910},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1579066663910},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1579066663910},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1579066663910},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1579066663914},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1579066663914},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1579066663914},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1579066663914},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1579066663914},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1579066663914},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1579066663910},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1579066663910},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1579066663914},{"_id":"public/2020/01/15/test-my-site/index.html","hash":"ab2754b7d6026d39e926a4ad1519fb32a0cf021a","modified":1579067975431},{"_id":"public/2020/01/15/hello-world/index.html","hash":"978ed8e9905cb0aea2e47ad1333f10ade10be1cc","modified":1579067975431},{"_id":"public/archives/index.html","hash":"8c3d107b9d3227df94ebf9a60554a87487165e60","modified":1579067975431},{"_id":"public/archives/2020/01/index.html","hash":"14ffe232fb4ff6ddb8b04a84a7f6156b980f82c1","modified":1579067975431},{"_id":"public/archives/2020/index.html","hash":"516890dc756c6f9d031441f9980671b0ab2f6b63","modified":1579067975431},{"_id":"public/index.html","hash":"e8c3283df2d78ac167226e2c0f650034080832ca","modified":1579067975431},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1579067975431},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1579067975431},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1579067975431},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1579067975431},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1579067975431},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1579067975431},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1579067975431},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1579067975431},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1579067975431},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1579067975431},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1579067975431},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1579067975431},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1579067975431},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1579067975431},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1579067975431},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1579067975431},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1579067975431},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1579067975431},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1579067975431},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1579067975431},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1579067975431},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1579067975431},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1579067975431},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1579068957212},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1579068957212},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1579068957212},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1579068957212},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1579068957212},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1579068957212},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1579068957212},{"_id":"themes/next/README.md","hash":"dc026053a4d9fb97a58dbc3e9060e480f6852b23","modified":1579068957212},{"_id":"themes/next/_config.yml","hash":"c24b6b1996e36d2bf266d8bab6b90f908d092e1e","modified":1579163432270},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1579068957212},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1579068957216},{"_id":"themes/next/package.json","hash":"19dda7fab09594faba989669e29de88c4289877f","modified":1579068957220},{"_id":"source/_posts/tags.md","hash":"0ef5cdcbe6dc0b37c3f25dd8eecea7abf45c8f73","modified":1579068649761},{"_id":"source/tags/index.md","hash":"c9249c297cdcc9ca79b1a5e3cf6e2312384d39f2","modified":1579071529358},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1579068957212},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ef63f34bd3b6bd4d7304d48ce5e0e3e2bead385","modified":1579068957212},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"715dcf9b0429a4a4c7107d6d1d00a34e4cf9aa99","modified":1579068957212},{"_id":"themes/next/.github/config.yml","hash":"e4f4b9afe59bc508c4f7634895b33d7d460a7cb1","modified":1579068957212},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1579068957212},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1579068957212},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1579068957212},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1579068957212},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1579068957212},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1579068957212},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1579068957212},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1579068957212},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1579068957212},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1579068957216},{"_id":"themes/next/docs/DATA-FILES.md","hash":"40a8089076005e0d26ef7c0db58a2b5b464cda6c","modified":1579068957216},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1579068957216},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1579068957216},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1579068957216},{"_id":"themes/next/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1579068957216},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"682937d48bf5d243842a76190921322e26c75247","modified":1579068957216},{"_id":"themes/next/languages/de.yml","hash":"285b294b1dd2ce49b0694beb4fd75ed05dc20ccb","modified":1579068957216},{"_id":"themes/next/languages/default.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1579068957216},{"_id":"themes/next/languages/en.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1579068957216},{"_id":"themes/next/languages/es.yml","hash":"3bd0977225a9b9dc3cdc856161b3a77e5993ac4a","modified":1579068957216},{"_id":"themes/next/languages/fa.yml","hash":"35468531ad0236df5b188f28bd1b4bb0c0537faf","modified":1579068957216},{"_id":"themes/next/languages/fr.yml","hash":"5fe560d14824c71ea90b2a76d0c17b2332b9d08a","modified":1579068957216},{"_id":"themes/next/languages/hu.yml","hash":"dd9e4cd2873ed9a9ae7cb89962eeff911de396b4","modified":1579068957216},{"_id":"themes/next/languages/id.yml","hash":"80c3db4c2dbbea0703f6c8f1191218f692899507","modified":1579068957216},{"_id":"themes/next/languages/it.yml","hash":"68ac5a0aa361210f51915e101c842ed1c9464889","modified":1579068957216},{"_id":"themes/next/languages/ja.yml","hash":"e61529ddf80426a5362ed07642216027615bd740","modified":1579068957216},{"_id":"themes/next/languages/ko.yml","hash":"14a162509dc71bb364335c20281d3bccbd2a51f3","modified":1579068957216},{"_id":"themes/next/languages/nl.yml","hash":"4d9b09aff03648cbbbfeb0c51a2d1214320b5ec6","modified":1579068957216},{"_id":"themes/next/languages/pt-BR.yml","hash":"024dcdeb30c93e57cd1ba4cd707f8988dcad2468","modified":1579068957216},{"_id":"themes/next/languages/pt.yml","hash":"88fb58e537a949c013a2adcdaebcbe09543c0bd2","modified":1579068957216},{"_id":"themes/next/languages/ru.yml","hash":"f7d5efd6289845f2375bbee8fe883813de745767","modified":1579068957220},{"_id":"themes/next/languages/tr.yml","hash":"e08d8d6ee9507a7c7d4450bc1c76b435470a3739","modified":1579068957220},{"_id":"themes/next/languages/uk.yml","hash":"e58393cf726401bf50a772392e23507d9e11049e","modified":1579068957220},{"_id":"themes/next/languages/vi.yml","hash":"0c0890ccffcb5cca0893de63ebad66e3ce740707","modified":1579068957220},{"_id":"themes/next/languages/zh-CN.yml","hash":"4b36a51556e87d236c6ac6ee6975de1beb95724c","modified":1579068957220},{"_id":"themes/next/languages/zh-HK.yml","hash":"6d83daf9df1811e3ae6cde5ad778c888d8027b13","modified":1579068957220},{"_id":"themes/next/languages/zh-TW.yml","hash":"5e395cb492a0b6284f8d2ffdd93f7380db31486f","modified":1579068957220},{"_id":"themes/next/layout/_layout.swig","hash":"29ee038b0d5ffdb45327598733ea968588367769","modified":1579068957220},{"_id":"themes/next/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1579068957220},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1579068957220},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1579068957220},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1579068957220},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1579068957220},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1579068957220},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1579068957224},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"8ae029084b9ac482adf0fae2a0979dd388476513","modified":1579068957212},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"7a9526f749205c882d672a4f51e6a3033c80ca6e","modified":1579068957212},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"89667adbb85c25716dba607cd7a38191acf60736","modified":1579068957212},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"789a3cceb8f37a4b63b1fb2452a03332a3c365ed","modified":1579068957212},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1579068957216},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1579068957216},{"_id":"themes/next/docs/ru/README.md","hash":"41b1bef32fb991410ebf559b4c45022549f95215","modified":1579068957216},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1579068957216},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1579068957216},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1579068957216},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"17d7203e85a8ce9760c42a853dee0f26a8f7ee4e","modified":1579068957216},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1579068957216},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1579068957216},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"0b0b9ec6ec4a89e701a3b91f8d7d95752d3e241b","modified":1579068957216},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"f0ffb74de522749c9f2fda46970a61bdafbfbc24","modified":1579068957216},{"_id":"themes/next/docs/zh-CN/README.md","hash":"b6a3611d40863c12804c5846994786119ce3b79f","modified":1579068957216},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"7f37327bbcae7ed7d04d187fd5e9bc6bbf14926a","modified":1579068957216},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1579068957220},{"_id":"themes/next/layout/_macro/post.swig","hash":"049caf88e2cb8dde780b0c6196db984c7bc3a4cc","modified":1579068957220},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1579068957220},{"_id":"themes/next/layout/_partials/comments.swig","hash":"0c4914a5fd08f15beec71940218c814ad9a89f3f","modified":1579068957220},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1ee6335c12773dc43f8b92136770cb10d460c25c","modified":1579068957220},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1579068957220},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1579068957220},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1579068957220},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1579068957220},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"970ad658eb15c8c694b1c17de516ba29ac9f1110","modified":1579068957220},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1579068957220},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1579068957220},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1579068957220},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1579068957220},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1579068957220},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1579068957220},{"_id":"themes/next/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1579068957220},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1579068957220},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1579068957220},{"_id":"themes/next/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1579068957220},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1579068957220},{"_id":"themes/next/scripts/filters/post.js","hash":"5e5035372b3d94a65309334c93303c858e072012","modified":1579068957220},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cb211b6b50913454b1737782e9e2af96cfa40448","modified":1579068957220},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1579068957220},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1579068957224},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1579068957224},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1579068957224},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1579068957224},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1579068957224},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1579068957224},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1579068957224},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1579068957224},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1579068957224},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1579068957224},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1579068957224},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1579068957224},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1579068957224},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1579068957228},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1579068957228},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1579068957228},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1579068957228},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1579068957228},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1579068957228},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1579068957228},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1579068957228},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1579068957228},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1579068957228},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1579068957228},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1579068957228},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1579068957228},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1579068957228},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1579068957228},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1579068957228},{"_id":"themes/next/source/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1579068957228},{"_id":"themes/next/source/js/motion.js","hash":"36262c60c63ed196764284247ba864343b2693fb","modified":1579068957228},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1579068957228},{"_id":"themes/next/source/js/utils.js","hash":"6ef79d54e71d7ddbb2e7ffa5aa9bbd28c543c835","modified":1579068957228},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1579068957228},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579068957224},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579068957224},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"1638483d2d2dad1da4c841a6fb9f6ee96b850187","modified":1579068957220},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1579068957220},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"0172055d118d1d7f4c8379c8495c1ee1aa50c7d9","modified":1579068957220},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1579068957220},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"bbf0c8e42491fac70f4f8165224f1d7d92a040d7","modified":1579068957220},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"e6076865dba066c5f0008e22217efb850d5af69c","modified":1579068957220},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"54ba9508a901c295a02c8e34e9cece7c7dcad518","modified":1579068957220},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1579068957220},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1579068957220},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1579068957220},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1579068957220},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1579068957220},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"1b7faa20a458b46369779b57bcc695bbc5d1c13a","modified":1579068957220},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1579068957220},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1579068957220},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1579068957220},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"716b78cd90addc4216413719554721cb362b0c18","modified":1579068957220},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"a2bb0bec243685e670b60a3d54142950adc03af0","modified":1579068957220},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1579068957220},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1579068957220},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1579068957220},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1579068957220},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1579068957220},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1579068957220},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1579068957220},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1579068957220},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1579068957220},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1579068957220},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1579068957220},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1ef172bc041d6f6b6c8c642ea64496a188d79029","modified":1579068957220},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"d3dc3e051e6816cdd576d00cc70b18b8a4c6a495","modified":1579068957220},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"ed236103bccbcf608f7d5d5b33b9f995d2f1a7de","modified":1579068957220},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1579068957220},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4d6f9e09ca4056ff6a5d4923e202126a75242183","modified":1579068957220},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1579068957220},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1579068957220},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1579068957220},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1579068957220},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1579068957220},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1579068957220},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1579068957220},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1579068957220},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"0ea0bac09b0747bc16fde852164c0eaab2efe02c","modified":1579068957220},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1579068957220},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"801e1d2f59f7d2db4096c4788b8469b4165f4965","modified":1579068957220},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1579068957220},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1579068957220},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b205d72a56b1827681f0a260c266e0c02065fd08","modified":1579068957220},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1579068957220},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1579068957220},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1579068957220},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1579068957220},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1579068957220},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"5ba0480c2dbb0626501c90c920be85ce2308103c","modified":1579068957220},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1579068957220},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1579068957220},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1579068957220},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"e24c4dd78f6e4adee0e7c15eb8bca12eb92452e4","modified":1579068957220},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1579068957224},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1579068957224},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1579068957224},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1579068957224},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1579068957224},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1579068957224},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1579068957224},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1579068957224},{"_id":"themes/next/source/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1579068957228},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"52d139e6f3bc212c8c9b71bc9e57e931920434a6","modified":1579068957228},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1579068957228},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1579068957228},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1579068957228},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1579068957228},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1579068957228},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1579068957232},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1579068957228},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"bc87cea0b534f2d75db60f300b069456f6516d1b","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1579068957224},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1579068957224},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1579068957224},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1579068957224},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1579068957224},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1579068957224},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1579068957224},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"8e1cc5e3b20d804a7265f945b877388bffee39eb","modified":1579068957224},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1579068957224},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1579068957224},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1579068957224},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1579068957224},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1579068957224},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1579068957224},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1579068957224},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1579068957224},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1579068957224},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c6905c694c6fbbf372b53456a0d219701010a110","modified":1579068957224},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1579068957224},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1579068957224},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1579068957224},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1579068957224},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f5abb2ea7746586738fb4e82107fceed041708ee","modified":1579068957224},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"71a3d7f2242706f7a6b79933a67ef3664cca3a24","modified":1579068957224},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d7587df06b30042091316d8b1cc58ba361211492","modified":1579068957224},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1579068957224},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1579068957224},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1579068957228},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1579068957228},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1579068957228},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1579068957228},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1579068957228},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"98227b4de364b48b11e21efcf4f1beb2ed3ab329","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"284249dcfa3b49c5d76210bbb0f74f65fc2f12ea","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2d9d68a431a334626d463bb1bdfbcd2ea8242e94","modified":1579068957224},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"c27b3056d5e22d3c66d8a152a23634314d5c4a60","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"1db4ce981fe9fcb9ee4279395c29553efbb43947","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"e2ad7ccf1865a45548e3f31c70fac2c65d6ef534","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"c83d750238d6ac13b65869a909465fe621c464c3","modified":1579068957224},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1579068957224},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1579068957224},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1579068957224},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"b4923515ca8e44aa62e839ce948f759cfd1f896f","modified":1579068957224},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1579068957224},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1579068957224},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1579068957224},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1579068957224},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1579068957224},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1579068957224},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1579068957224},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1579068957224},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1579068957228},{"_id":"themes/next/source/lib/pjax/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1579070988819},{"_id":"themes/next/source/lib/pjax/.git/config","hash":"4f9af8eb3129525c2195d75e2446be5a846613e8","modified":1579070991143},{"_id":"themes/next/source/lib/pjax/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1579070988819},{"_id":"themes/next/source/lib/pjax/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1579070988819},{"_id":"themes/next/source/lib/pjax/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1579070988819},{"_id":"themes/next/source/lib/pjax/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1579070988819},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1579070988819},{"_id":"themes/next/source/lib/pjax/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1579070988819},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1579070988819},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1579070988819},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1579070988819},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1579070988819},{"_id":"themes/next/source/lib/pjax/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1579070988819},{"_id":"themes/next/source/lib/pjax/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1579070988819},{"_id":"themes/next/source/lib/pjax/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1579070988819},{"_id":"themes/next/source/lib/pjax/.git/logs/HEAD","hash":"e78738ca0d9d6e14f451b49312e53797aa6dac5a","modified":1579070991143},{"_id":"themes/next/source/lib/pjax/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1579070991143},{"_id":"themes/next/source/lib/pjax/.git/logs/refs/heads/master","hash":"e78738ca0d9d6e14f451b49312e53797aa6dac5a","modified":1579070991143},{"_id":"themes/next/source/lib/pjax/.git/logs/refs/remotes/origin/HEAD","hash":"e78738ca0d9d6e14f451b49312e53797aa6dac5a","modified":1579070991143},{"_id":"themes/next/source/lib/pjax/example/example.js","hash":"48b27c93eb351d2fa91247c35038a9f1627e971a","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/example/forms.html","hash":"aa62fc6e697e17e16a947eb0176dc24e2e42d72c","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/example/index.html","hash":"4a00b556253eeb11fc10013c8c3940a019154001","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/example/page2.html","hash":"7654e0a5a471bec5d74fb88d9f2f218817afdd52","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/example/page3.html","hash":"8d1d6a9afd80caf29e5b22f10a849b23a864a6a4","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/abort-request.js","hash":"cbae038c94f70163340801cb608f4e503640b88d","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/eval-script.js","hash":"d5980b3c5f3c1a95427eab0d7d2263324fb72bca","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/execute-scripts.js","hash":"8c7c18b14c11af7e2d8dd0146b7df428bf8149bb","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/foreach-els.js","hash":"d8e50967878930891112f4acb46f47697ddc3ad7","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/foreach-selectors.js","hash":"b11d36344a7a6aa36d533a335785772c9bfb6bc9","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/is-supported.js","hash":"62ede7268080ab7efddd64fced8b3e79af2901f6","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/parse-options.js","hash":"054a902e9f350f7414b80f62419da004dd90aa37","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/send-request.js","hash":"15c341d066b0d60879ef3ca5ff858103381fb378","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/switches-selectors.js","hash":"f31b4af163db3d9a5b3bb7c7534a4a2dd5543435","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/switches.js","hash":"4e283f667c10e0fea15e269f1c73ccb699979bb4","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/uniqueid.js","hash":"eb127cf8936e5bdcaa7459cf5bd042ff96b5a387","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/events/off.js","hash":"79920b24246e150f1c73511f1a271b93b9c5d9c8","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/events/on.js","hash":"111fba16cc4ca701aefedea2589c832b60af303d","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/events/trigger.js","hash":"c05ba73199c5e2c7682655491ed37743bd451751","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-form.js","hash":"b41c66e58897e6371fbd04cd2b9eb7bae10e0d89","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-link.js","hash":"d15a61235aa8c1615e60ea34d9bbee834be804d0","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/proto/handle-response.js","hash":"f68bab958cce4dbbcb91920d7a8aba55b9066b41","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/proto/log.js","hash":"c728730594aed7d81509787c5bb487af014415e1","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/proto/parse-element.js","hash":"52bef8a845aab0d54907f73875fa58b4084019be","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/util/clone.js","hash":"55027b88e007818c6963205fcd0090a61af8237c","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/util/contains.js","hash":"fcc9be0477d941b7c4ba71de328773e556ded7ce","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/util/extend.js","hash":"e599aaef93e3a00ccbd92cd87df09898d712e398","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/util/noop.js","hash":"2c9f7e231af1a62db195875ca62df7edc253c3c4","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/lib/util/update-query-string.js","hash":"eefcbff322f8c607865d47ee8fa49f1c8bfa8d7a","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/setup.js","hash":"4a9489e72cbe98527931d95d68b68e2d6a9bff6e","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/test.ts","hash":"3a5222592fc1883ba6d07fbb2095e4bb4866e9d9","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/abort-request.js","hash":"96d7a604ca275455199bd94d16b9cdc254bee9b9","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/eval-scripts.js","hash":"3c9125a04cec9d511f16f9311656533ef6a115d1","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/events.js","hash":"70ca7ec140d1dcf8c4958e7b6788b09ef2b60181","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/execute-scripts.js","hash":"2d02a0151ead9924516cdae9308f8667b27a7ea7","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-els.js","hash":"85995dd27d0d866cfaf5c560732fab8b0099938c","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-selectors.js","hash":"898b48ef191719070488f16a54fba8a794b10057","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/is-supported.js","hash":"e25c7e69c8b7a64a44affcae317adb2b3889aee6","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/parse-options.js","hash":"45ab302da33e5457a71fd22bbd082e51f5b06b49","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/send-request.js","hash":"d6adad7f95754c53b9885c0999a5118995fdc76f","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/switch-selectors.js","hash":"993dd67b1b629288feb8d167fb12b602626cf1d5","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/switches.js","hash":"f5dfdf57bafd2b4edd5f854d70837b5fe760756e","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/uniqueid.js","hash":"430550f31b9e6356c2e3a033c1b418bd6acd9667","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-form.js","hash":"3614a962e3185b354a2e0d987bcecdef4a209da6","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-link.js","hash":"9d283cb0b09730e932673c73a3352a2d2e8939fa","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/handle-response.js","hash":"26e0e334f0b20ff2fe75b3ab12a93ce44a5823f0","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/parse-element.js","hash":"474edc8844028de67cbad054da79c05727620785","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/util/clone.js","hash":"4b0e62bd0f4eef3549b0da70987f63ce4953bef0","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/util/contains.js","hash":"bc0c8be855e9736cb256a2aa44fd46f3a7d1d6c5","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/util/extend.js","hash":"d45488ff6f8e3e1b59a62d0c88c86b750fe50ed4","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/util/noop.js","hash":"6959a4c02c41453a5edfa4163e36752fcfa3edf9","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/tests/lib/util/update-query-string.js","hash":"4158dcd877c5f229400417e0da22eb4c5b8e8e38","modified":1579070991155},{"_id":"source/categories/index.md","hash":"d9c4964ac4868211137a47be14a26beef751a286","modified":1579071577382},{"_id":"source/404.md","hash":"e0892bf36ea73cf602a5f3982b55ca3b029116e0","modified":1579161735400},{"_id":"source/images/test","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579161558490},{"_id":"source/_posts/Foreign Accent Conversion by Synthesizing Speech  from Phonetic Posteriorgrams.md","hash":"c9739de52ac8be74806581e4fad29b93b73a6bd2","modified":1579163054792},{"_id":"source/_posts/command.md","hash":"a8f92f838cac95cae71bf5b9bf3a06d467b2903d","modified":1579079306248},{"_id":"source/images/20190212211055433.jpg","hash":"9e3bb53bd7284752b58d6df6d6969dedd5e7bf8a","modified":1579163054792},{"_id":"source/images/f1.png","hash":"8ef54b56a08f57fb55b25853afb8d4e4dfd6b6cf","modified":1579163054796},{"_id":"source/images/f2.png","hash":"91577e5f7e8c6f6cc098d21f87fe7ceca3832bca","modified":1579163054796},{"_id":"source/images/f3.png","hash":"7b143b98e468c4dcb01017c2a949b525ba179581","modified":1579163054796},{"_id":"source/images/f4.png","hash":"f4055ca61264e4a5dc84c9490c7f5fbd3b4b606a","modified":1579163054796},{"_id":"source/images/f5.png","hash":"a82f85324e18370bdf226d331c47888a7796831a","modified":1579163054796},{"_id":"source/images/f6.png","hash":"bb936b1b960e3236c62eacdd02a7e2f9bd07b23f","modified":1579163054796},{"_id":"source/images/f7.png","hash":"e474840deab4436d36b071261d054b6ac54f4799","modified":1579163054796},{"_id":"source/images/fa6.png","hash":"7983c2683886711d5aaf900f31f1de6d8c01c34a","modified":1579163054796},{"_id":"source/images/sf6.png","hash":"f8c0ade39d220692dd557146ce8226228870c3fc","modified":1579163054796},{"_id":"source/images/FAC1.png","hash":"5207eed906e731780b31ac23dc857447ba1c08ac","modified":1579163054792},{"_id":"source/images/FAC2.png","hash":"5cf6550cc412b6b259c2c996029c06ce474c829d","modified":1579163054792},{"_id":"source/images/FACt1.png","hash":"89001e4ef33553b35044eeceb7ad0417d9065b8c","modified":1579163054792},{"_id":"source/images/df.png","hash":"a1e80ae1607ec0f4ff6928f3c0978436a16c2fb4","modified":1579163054796},{"_id":"themes/next/source/images/avatar.jpg","hash":"81550da6479bf0f4572932bb5b3190b1ee20a213","modified":1579078305838},{"_id":"themes/next/source/images/avatar0.jpg","hash":"6104108d11c22c925ca7d7ef759379979cd6a1f0","modified":1579078305838},{"_id":"themes/next/source/lib/pjax/.editorconfig","hash":"c064a6369e31f846061fec42fd20c94cd34baebf","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/.eslintignore","hash":"9039b3607514f44ee5955e986ee96920ea324398","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/.eslintrc.json","hash":"cdbc258b29270771e1846aeacc67198d0aed5447","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/.gitignore","hash":"af77252405d1ae97b1d4139b53f2684b64d87596","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/.prettierignore","hash":"9039b3607514f44ee5955e986ee96920ea324398","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/.travis.yml","hash":"0948420e18b2cec89c40093da5c7c14fa4c9bc5d","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/CHANGELOG.md","hash":"4482a245ac2c867102490c71d0fcbb502be0e3e5","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/LICENSE","hash":"0cadc79604daeacf95062d1e5ccd43edbfaed836","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/README.md","hash":"6e83f73f2c43fc4f85eda51daed5c321ec55c83c","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/index.d.ts","hash":"b90fe99fe90ee7024d760467e75565da561f7ccd","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/index.js","hash":"4af61bcf253ce67d67bb0f524b441869301de9a5","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/package.json","hash":"1c0055fc51eee37e39ca9d5b6ea5078677b20201","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/pjax.js","hash":"e973e2c6ffb6f6d7b4a1730ba0ed6d3628b2b39f","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/pjax.min.js","hash":"68d0c6ad28f042c78fc18a6e9d782a7047c01905","modified":1579070991155},{"_id":"themes/next/source/lib/pjax/.git/index","hash":"7de4ce5251ae48f8a1222b79d0e9162fb7846c27","modified":1579070991159},{"_id":"themes/next/source/lib/pjax/.git/packed-refs","hash":"edbdf218d3ec5dca511b8e29e88aebcf725d68ad","modified":1579070991143},{"_id":"themes/next/source/lib/pjax/.git/objects/pack/pack-6676209366959508b7039bccc564fff2659503c6.idx","hash":"eec4e30af70e4d372ab4327a48d2d5b40ae113b9","modified":1579070991035},{"_id":"themes/next/source/lib/pjax/.git/refs/heads/master","hash":"3c8414e83b32974579667c4c79e04af7d699edde","modified":1579070991143},{"_id":"themes/next/source/lib/pjax/.git/objects/pack/pack-6676209366959508b7039bccc564fff2659503c6.pack","hash":"9eee1305363808025c13b7012f1362993ec9a9f2","modified":1579070991035}],"Category":[{"name":"Linux","_id":"ck5f31qmp00062dpkfqmif8da"},{"name":"accent conversion","_id":"ck5gf2cxm000b2dpk8ii384im"}],"Data":[],"Page":[{"title":"404 Not Found","date":"2019-09-22T01:41:27.000Z","_content":"\n<center>\nSorry, this page is 404!\nPlease <a href=\"https://seiifuu.github.io>\">click here</a>return to home。\n</center>\n\n<blockquote class=\"blockquote-center\">\n    WZJQ BLOG\n</blockquote>\n","source":"404.md","raw":"---\ntitle: 404 Not Found\ndate: 2019-09-22 10:41:27\n---\n\n<center>\nSorry, this page is 404!\nPlease <a href=\"https://seiifuu.github.io>\">click here</a>return to home。\n</center>\n\n<blockquote class=\"blockquote-center\">\n    WZJQ BLOG\n</blockquote>\n","updated":"2020-01-16T08:02:15.400Z","path":"404.html","_id":"ck5ey8uva00022dpk8fyxaas9","comments":1,"layout":"page","content":"<center>\nSorry, this page is 404! Please <a href=\"https://seiifuu.github.io>\" target=\"_blank\" rel=\"noopener\">click here</a>return to home。\n</center>\n<blockquote class=\"blockquote-center\">\nWZJQ BLOG\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<center>\nSorry, this page is 404! Please <a href=\"https://seiifuu.github.io>\" target=\"_blank\" rel=\"noopener\">click here</a>return to home。\n</center>\n<blockquote class=\"blockquote-center\">\nWZJQ BLOG\n</blockquote>\n"},{"title":"tags","date":"2020-01-15T06:58:14.000Z","type":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-01-15 15:58:14\ntype: tags\n---\n\n","updated":"2020-01-15T06:58:49.358Z","path":"tags/index.html","_id":"ck5eyeasb00032dpk89eh5wsg","comments":1,"layout":"page","content":"\n","site":{"data":{}},"excerpt":"","more":"\n"},{"title":"categories","date":"2020-01-15T06:59:07.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-01-15 15:59:07\ntype: categories\n---\n","updated":"2020-01-15T06:59:37.382Z","path":"categories/index.html","_id":"ck5eyfg1f00042dpk56o94331","comments":1,"layout":"page","content":"\n","site":{"data":{}},"excerpt":"","more":"\n"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n> 搭建教程  https://cloud.tencent.com/developer/article/1516761\n> 如何将源码上传到分支 https://blog.csdn.net/qq_27437967/article/details/7118957\n>\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n> 搭建教程  https://cloud.tencent.com/developer/article/1516761\n> 如何将源码上传到分支 https://blog.csdn.net/qq_27437967/article/details/7118957\n>\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-01-15T07:34:41.162Z","updated":"2020-01-15T07:34:41.134Z","_id":"ck5ewavxu0000w0pk1vl3767j","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<blockquote>\n<p>搭建教程 https://cloud.tencent.com/developer/article/1516761 如何将源码上传到分支 https://blog.csdn.net/qq_27437967/article/details/7118957</p>\n</blockquote>\n<h2 id=\"quick-start\">Quick Start</h2>\n<h3 id=\"create-a-new-post\">Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"run-server\">Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"generate-static-files\">Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\">Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<blockquote>\n<p>搭建教程 https://cloud.tencent.com/developer/article/1516761 如何将源码上传到分支 https://blog.csdn.net/qq_27437967/article/details/7118957</p>\n</blockquote>\n<h2 id=\"quick-start\">Quick Start</h2>\n<h3 id=\"create-a-new-post\">Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"run-server\">Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"generate-static-files\">Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\">Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"Manjaro command line","date":"2020-01-14T15:00:00.000Z","_content":"## Command Line\n\n- 列出目录下的所有文件夹的及文件，规整 \n  - ls -laR /etc/X11/\n- 查看安装的驱动\n  - inxi -G\n- 查看各文件大小\n    - du [-abcDhHklmsSx] [-L <符号连接>][-X <文件>][--block-size][--exclude=<目录或文件>] [--max-depth=<目录层数>][--help][--version][目录或文件]\n    - eg.    sudo du -h --max-depth=1\n- smb://ganglion/disk1\n\n## Docker\n\n[https://wiki.archlinux.org/index.php/Docker_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)](https://wiki.archlinux.org/index.php/Docker_(简体中文))\n\nhttps://zhuanlan.zhihu.com/p/65696014\n\nhttps://blog.csdn.net/github_36749622/article/details/83094601\n\n\n\n## Colab\n\nhttps://medium.com/deep-learning-turkey/google-colab-free-gpu-tutorial-e113627b9f5d\n\nhttps://juejin.im/post/5c05e1bc518825689f1b4948\n\n- 设置GPU\n\n- 授权和切换工作路径\n\n```bash\n!apt-get install -y -qq software-properties-common python-software-properties module-init-tools\n!add-apt-repository -y ppa:alessandro-strada/ppa 2>&1 > /dev/null\n!apt-get update -qq 2>&1 > /dev/null\n!apt-get -y install -qq google-drive-ocamlfuse fuse\nfrom google.colab import auth\nauth.authenticate_user()\nfrom oauth2client.client import GoogleCredentials\ncreds = GoogleCredentials.get_application_default()\nimport getpass\n!google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret} < /dev/null 2>&1 | grep URL\nvcode = getpass.getpass()\n!echo {vcode} | google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret}\n\n!mkdir -p drive\n!google-drive-ocamlfuse drive\n```\n```\nimport os\n\npath = \"/content/drive/OpenNMT/...(dirs...)\"\nos.chdir(path)\nos.listdir(path)\n```\n\n\n- 安装anaconda环境，配置conda env\n```\nhttps://facebookresearch.github.io/TensorComprehensions/installation_colab_research.html\n```\n\n\n\n\n\n\n## Vim\n\n[vim for python](https://realpython.com/vim-and-python-a-match-made-in-heaven/#verifying-your-vim-install)\n\n####  . sp / vs 分屏\n\n- sp / vs 后 <tab> 检索打开的文件\n\n- 垂直方向分屏： sp  <filename>\n\n- 水平方向分屏：vs <filename>\n\n#### . ls / b 阅览与打开历史打开文件\n\n- 打开最近打开列表:：ls \n\n- 打开对应编号的文件：b <buffer nubmer> \n\n#### . 空格折叠\n\n- .vimrc: nnoremap <space> za\n- Plugin 'tmhedberg/SimpylFold'（未安装成功）\n\n\n\n## Git\n\nhttp://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\n\n![img](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png)\n\n#### 新建代码库\n\n```bash\n# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n```\n\n#### 配置\n\nGit的设置文件为`.gitconfig`，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n```bash\n# 显示当前的Git配置\n$ git config --list\n \n# 编辑Git配置文件\n$ git config -e [--global]\n \n# 设置提交代码时的用户信息\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n```\n\n#### 增加/删除文件\n\n```bash\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n```\n\n#### 代码提交\n\n```bash\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n```\n\n#### 分支\n\n```bash\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n```\n\n#### 标签\n\n```bash\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n```\n\n#### 查看信息\n\n```bash\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n```\n\n#### 远程同步\n\n```bash\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n```\n\n#### 撤销\n\n```bash\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n```\n\n#### 其他\n\n```bash\n# 生成一个可供发布的压缩包\n$ git archive\n```\n\n\n\n## pacman\n\n`sudo pacman-mirrors --fasttrack && sudo pacman -Syyu`\n\n``pacman -S package_name        # 安装软件  \npacman -S extra/package_name  # 安装不同仓库中的版本\npacman -Syu                   # 升级整个系统，y是更新数据库，yy是强制更新，u是升级软件\npacman -Ss string             # 在包数据库中查询软件\npacman -Si package_name       # 显示软件的详细信息\npacman -Sc                    # 清除软件缓存，即/var/cache/pacman/pkg目录下的文件\npacman -R package_name        # 删除单个软件\npacman -Rs package_name       # 删除指定软件及其没有被其他已安装软件使用的依赖关系\npacman -Qs string             # 查询已安装的软件包\npacman -Qi package_name       # 查询本地安装包的详细信息\npacman -Ql package_name       # 获取已安装软件所包含的文件的列表\npacman -U package.tar.zx      # 从本地文件安装\npactree package_name          # 显示软件的依赖树``\n\n列出已经安装的软件包👇\n\npacman -Q\n查看virtualbox包是否已经安装👇\n\npacman -Q virtualbox\n查看已安装的包virtualbox的详细信息👇\n\npacman -Qi virtualbox\n列出已安装包virtualbox的所有文件👇\n\npacman -Ql virtualbox\n查找某个文件属于哪个包👇\n\npacman -Qo /etc/passwd\n查询包组👇\n\npacman -Sg\n查询包组所包含的软件包👇\n\npacman -Sg gnome\n搜索virtualbox相关的包👇\n\npacman -Ss virtualbox\n从数据库中搜索virtualbox的信息👇\n\n**pacman -Si virtualbox**\n**仅同步源👇**\n\n**sudo pacman -Sy**\n**更新系统👇**\n\n**sudo pacman -Su**\n**同步源并更新系统👇**\n\n**sudo pacman -Syu**\n**同步源后安装包👇**\n\nsudo pacman -Sy virtualbox\n从本地数据库中获取virtualbox的信息，并下载安装👇\n\nsudo pacman -S virtualbox\n强制安装virtualbox包👇\n\nsudo pacman -Sf virtualbox\n删除virtualbox👇\n\nsudo pacman -R virtualbox\n强制删除被依赖的包（慎用）👇\n\nsudo pacman -Rd virtualbox\n删除virtualbox包及依赖其的包👇\n\nsudo pacman -Rc virtualbox\n删除virtualbox包及其依赖的包👇\n\nsudo pacman -Rsc virtualbox\n清理/var/cache/pacman/pkg目录下的旧包👇\n\nsudo pacman -Sc\n清除所有下载的包和数据库👇\n\nsudo pacman -Scc\n安装下载的virtualbox包（有时候需要降级包的时候就用这个）👇\n\ncd /var/cache/pacman/pkg\n\nsudo pacman -U virtualbox-5.2.12-1-x86_64.pkg.tar.xz\n升级时不升级virtualbox包👇\n\nsudo pacman -Su --ignore virtualbox\n详细请转向：https://wiki.archlinux.org/index.php/Pacman_(简体中文)\n\n## conda\n\n0.获取版本号\n\tconda --version\n\n或\n\n​\tconda -V\n\n1.获取帮助\n\tconda --help\n\tconda -h\n查看某一命令的帮助，如update命令及remove命令\n\tconda update --help\n\tconda remove --help\n同理，以上命令中的--help也可以换成-h。\n\n2.环境管理\n查看环境管理的全部命令帮助\n\tconda env -h\n\n创建环境\n\tconda create --name your_env_name\n输入y确认创建。\n\n创建制定python版本的环境\n\tconda create --name your_env_name python=2.7\n\tconda create --name your_env_name python=3\n\tconda create --name your_env_name python=3.5\n\n创建包含某些包的环境\n\tconda create --name your_env_name numpy scipy\n\n创建指定python版本下包含某些包的环境\n\tconda create --name your_env_name python=3.5 numpy scipy\n\n列举当前所有环境\n\tconda info --envs\n\tconda env list\n\n进入某个环境\n\tactivate your_env_name\n\n退出当前环境\n\tdeactivate \n\n复制某个环境\n\tconda create --name new_env_name --clone old_env_name \n\n删除某个环境\n\tconda remove --name your_env_name --all\n\n4.包管理\n列举当前活跃环境下的所有包\n\tconda list\n\n列举一个非当前活跃环境下的所有包\n\tconda list -n your_env_name\n\n为指定环境安装某个包\n\tconda install -n env_name package_name\n\n如果不能通过conda install来安装，文档中提到可以从Anaconda.org安装，但我觉得会更习惯用pip直接安装。pip在Anaconda中已安装好，不需要单独为每个环境安装pip。如需要用pip管理包，activate环境后直接使用即可。\n\n5.清理包\n\n​\tconda clean --all\t\n\n\n\n## Reboot\n\n.i3/config\n\n~/.zshrc\n\n~/command.md\n\n~~/etc/fstab~~\n\n~/.vimrc\n\nganglion 挂载\n\nsmb://ganglion/disk1\n\n\n\n## For Nvidia-GPU\n\nhttps://blog.csdn.net/qq_39828850/article/details/87919188\n\n## \n","source":"_posts/command.md","raw":"---\ntitle: Manjaro command line\ndate: 2020-01-15\ntags:\n- Linux\ncategories:\n- Linux\n---\n## Command Line\n\n- 列出目录下的所有文件夹的及文件，规整 \n  - ls -laR /etc/X11/\n- 查看安装的驱动\n  - inxi -G\n- 查看各文件大小\n    - du [-abcDhHklmsSx] [-L <符号连接>][-X <文件>][--block-size][--exclude=<目录或文件>] [--max-depth=<目录层数>][--help][--version][目录或文件]\n    - eg.    sudo du -h --max-depth=1\n- smb://ganglion/disk1\n\n## Docker\n\n[https://wiki.archlinux.org/index.php/Docker_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)](https://wiki.archlinux.org/index.php/Docker_(简体中文))\n\nhttps://zhuanlan.zhihu.com/p/65696014\n\nhttps://blog.csdn.net/github_36749622/article/details/83094601\n\n\n\n## Colab\n\nhttps://medium.com/deep-learning-turkey/google-colab-free-gpu-tutorial-e113627b9f5d\n\nhttps://juejin.im/post/5c05e1bc518825689f1b4948\n\n- 设置GPU\n\n- 授权和切换工作路径\n\n```bash\n!apt-get install -y -qq software-properties-common python-software-properties module-init-tools\n!add-apt-repository -y ppa:alessandro-strada/ppa 2>&1 > /dev/null\n!apt-get update -qq 2>&1 > /dev/null\n!apt-get -y install -qq google-drive-ocamlfuse fuse\nfrom google.colab import auth\nauth.authenticate_user()\nfrom oauth2client.client import GoogleCredentials\ncreds = GoogleCredentials.get_application_default()\nimport getpass\n!google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret} < /dev/null 2>&1 | grep URL\nvcode = getpass.getpass()\n!echo {vcode} | google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret}\n\n!mkdir -p drive\n!google-drive-ocamlfuse drive\n```\n```\nimport os\n\npath = \"/content/drive/OpenNMT/...(dirs...)\"\nos.chdir(path)\nos.listdir(path)\n```\n\n\n- 安装anaconda环境，配置conda env\n```\nhttps://facebookresearch.github.io/TensorComprehensions/installation_colab_research.html\n```\n\n\n\n\n\n\n## Vim\n\n[vim for python](https://realpython.com/vim-and-python-a-match-made-in-heaven/#verifying-your-vim-install)\n\n####  . sp / vs 分屏\n\n- sp / vs 后 <tab> 检索打开的文件\n\n- 垂直方向分屏： sp  <filename>\n\n- 水平方向分屏：vs <filename>\n\n#### . ls / b 阅览与打开历史打开文件\n\n- 打开最近打开列表:：ls \n\n- 打开对应编号的文件：b <buffer nubmer> \n\n#### . 空格折叠\n\n- .vimrc: nnoremap <space> za\n- Plugin 'tmhedberg/SimpylFold'（未安装成功）\n\n\n\n## Git\n\nhttp://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\n\n![img](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png)\n\n#### 新建代码库\n\n```bash\n# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n```\n\n#### 配置\n\nGit的设置文件为`.gitconfig`，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n```bash\n# 显示当前的Git配置\n$ git config --list\n \n# 编辑Git配置文件\n$ git config -e [--global]\n \n# 设置提交代码时的用户信息\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n```\n\n#### 增加/删除文件\n\n```bash\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n```\n\n#### 代码提交\n\n```bash\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n```\n\n#### 分支\n\n```bash\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n```\n\n#### 标签\n\n```bash\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n```\n\n#### 查看信息\n\n```bash\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n```\n\n#### 远程同步\n\n```bash\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n```\n\n#### 撤销\n\n```bash\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n```\n\n#### 其他\n\n```bash\n# 生成一个可供发布的压缩包\n$ git archive\n```\n\n\n\n## pacman\n\n`sudo pacman-mirrors --fasttrack && sudo pacman -Syyu`\n\n``pacman -S package_name        # 安装软件  \npacman -S extra/package_name  # 安装不同仓库中的版本\npacman -Syu                   # 升级整个系统，y是更新数据库，yy是强制更新，u是升级软件\npacman -Ss string             # 在包数据库中查询软件\npacman -Si package_name       # 显示软件的详细信息\npacman -Sc                    # 清除软件缓存，即/var/cache/pacman/pkg目录下的文件\npacman -R package_name        # 删除单个软件\npacman -Rs package_name       # 删除指定软件及其没有被其他已安装软件使用的依赖关系\npacman -Qs string             # 查询已安装的软件包\npacman -Qi package_name       # 查询本地安装包的详细信息\npacman -Ql package_name       # 获取已安装软件所包含的文件的列表\npacman -U package.tar.zx      # 从本地文件安装\npactree package_name          # 显示软件的依赖树``\n\n列出已经安装的软件包👇\n\npacman -Q\n查看virtualbox包是否已经安装👇\n\npacman -Q virtualbox\n查看已安装的包virtualbox的详细信息👇\n\npacman -Qi virtualbox\n列出已安装包virtualbox的所有文件👇\n\npacman -Ql virtualbox\n查找某个文件属于哪个包👇\n\npacman -Qo /etc/passwd\n查询包组👇\n\npacman -Sg\n查询包组所包含的软件包👇\n\npacman -Sg gnome\n搜索virtualbox相关的包👇\n\npacman -Ss virtualbox\n从数据库中搜索virtualbox的信息👇\n\n**pacman -Si virtualbox**\n**仅同步源👇**\n\n**sudo pacman -Sy**\n**更新系统👇**\n\n**sudo pacman -Su**\n**同步源并更新系统👇**\n\n**sudo pacman -Syu**\n**同步源后安装包👇**\n\nsudo pacman -Sy virtualbox\n从本地数据库中获取virtualbox的信息，并下载安装👇\n\nsudo pacman -S virtualbox\n强制安装virtualbox包👇\n\nsudo pacman -Sf virtualbox\n删除virtualbox👇\n\nsudo pacman -R virtualbox\n强制删除被依赖的包（慎用）👇\n\nsudo pacman -Rd virtualbox\n删除virtualbox包及依赖其的包👇\n\nsudo pacman -Rc virtualbox\n删除virtualbox包及其依赖的包👇\n\nsudo pacman -Rsc virtualbox\n清理/var/cache/pacman/pkg目录下的旧包👇\n\nsudo pacman -Sc\n清除所有下载的包和数据库👇\n\nsudo pacman -Scc\n安装下载的virtualbox包（有时候需要降级包的时候就用这个）👇\n\ncd /var/cache/pacman/pkg\n\nsudo pacman -U virtualbox-5.2.12-1-x86_64.pkg.tar.xz\n升级时不升级virtualbox包👇\n\nsudo pacman -Su --ignore virtualbox\n详细请转向：https://wiki.archlinux.org/index.php/Pacman_(简体中文)\n\n## conda\n\n0.获取版本号\n\tconda --version\n\n或\n\n​\tconda -V\n\n1.获取帮助\n\tconda --help\n\tconda -h\n查看某一命令的帮助，如update命令及remove命令\n\tconda update --help\n\tconda remove --help\n同理，以上命令中的--help也可以换成-h。\n\n2.环境管理\n查看环境管理的全部命令帮助\n\tconda env -h\n\n创建环境\n\tconda create --name your_env_name\n输入y确认创建。\n\n创建制定python版本的环境\n\tconda create --name your_env_name python=2.7\n\tconda create --name your_env_name python=3\n\tconda create --name your_env_name python=3.5\n\n创建包含某些包的环境\n\tconda create --name your_env_name numpy scipy\n\n创建指定python版本下包含某些包的环境\n\tconda create --name your_env_name python=3.5 numpy scipy\n\n列举当前所有环境\n\tconda info --envs\n\tconda env list\n\n进入某个环境\n\tactivate your_env_name\n\n退出当前环境\n\tdeactivate \n\n复制某个环境\n\tconda create --name new_env_name --clone old_env_name \n\n删除某个环境\n\tconda remove --name your_env_name --all\n\n4.包管理\n列举当前活跃环境下的所有包\n\tconda list\n\n列举一个非当前活跃环境下的所有包\n\tconda list -n your_env_name\n\n为指定环境安装某个包\n\tconda install -n env_name package_name\n\n如果不能通过conda install来安装，文档中提到可以从Anaconda.org安装，但我觉得会更习惯用pip直接安装。pip在Anaconda中已安装好，不需要单独为每个环境安装pip。如需要用pip管理包，activate环境后直接使用即可。\n\n5.清理包\n\n​\tconda clean --all\t\n\n\n\n## Reboot\n\n.i3/config\n\n~/.zshrc\n\n~/command.md\n\n~~/etc/fstab~~\n\n~/.vimrc\n\nganglion 挂载\n\nsmb://ganglion/disk1\n\n\n\n## For Nvidia-GPU\n\nhttps://blog.csdn.net/qq_39828850/article/details/87919188\n\n## \n","slug":"command","published":1,"updated":"2020-01-15T09:08:26.248Z","_id":"ck5f0bbnb00052dpk716e10bg","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"command-line\">Command Line</h2>\n<ul>\n<li>列出目录下的所有文件夹的及文件，规整\n<ul>\n<li>ls -laR /etc/X11/</li>\n</ul></li>\n<li>查看安装的驱动\n<ul>\n<li>inxi -G</li>\n</ul></li>\n<li>查看各文件大小\n<ul>\n<li>du [-abcDhHklmsSx] [-L <符号连接>][-X <文件>][--block-size][--exclude=<目录或文件>] [--max-depth=<目录层数>][--help][--version][目录或文件]</li>\n<li>eg. sudo du -h --max-depth=1</li>\n</ul></li>\n<li>smb://ganglion/disk1</li>\n</ul>\n<h2 id=\"docker\">Docker</h2>\n<p><a href=\"https://wiki.archlinux.org/index.php/Docker_(简体中文)\" target=\"_blank\" rel=\"noopener\">https://wiki.archlinux.org/index.php/Docker_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>\n<p>https://zhuanlan.zhihu.com/p/65696014</p>\n<p>https://blog.csdn.net/github_36749622/article/details/83094601</p>\n<h2 id=\"colab\">Colab</h2>\n<p>https://medium.com/deep-learning-turkey/google-colab-free-gpu-tutorial-e113627b9f5d</p>\n<p>https://juejin.im/post/5c05e1bc518825689f1b4948</p>\n<ul>\n<li><p>设置GPU</p></li>\n<li><p>授权和切换工作路径</p></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!apt-get install -y -qq software-properties-common python-software-properties module-init-tools</span><br><span class=\"line\">!add-apt-repository -y ppa:alessandro-strada/ppa 2&gt;&amp;1 &gt; /dev/null</span><br><span class=\"line\">!apt-get update -qq 2&gt;&amp;1 &gt; /dev/null</span><br><span class=\"line\">!apt-get -y install -qq google-drive-ocamlfuse fuse</span><br><span class=\"line\">from google.colab import auth</span><br><span class=\"line\">auth.authenticate_user()</span><br><span class=\"line\">from oauth2client.client import GoogleCredentials</span><br><span class=\"line\">creds = GoogleCredentials.get_application_default()</span><br><span class=\"line\">import getpass</span><br><span class=\"line\">!google-drive-ocamlfuse -headless -id=&#123;creds.client_id&#125; -secret=&#123;creds.client_secret&#125; &lt; /dev/null 2&gt;&amp;1 | grep URL</span><br><span class=\"line\">vcode = getpass.getpass()</span><br><span class=\"line\">!<span class=\"built_in\">echo</span> &#123;vcode&#125; | google-drive-ocamlfuse -headless -id=&#123;creds.client_id&#125; -secret=&#123;creds.client_secret&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">!mkdir -p drive</span><br><span class=\"line\">!google-drive-ocamlfuse drive</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\">path &#x3D; &quot;&#x2F;content&#x2F;drive&#x2F;OpenNMT&#x2F;...(dirs...)&quot;</span><br><span class=\"line\">os.chdir(path)</span><br><span class=\"line\">os.listdir(path)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装anaconda环境，配置conda env <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;facebookresearch.github.io&#x2F;TensorComprehensions&#x2F;installation_colab_research.html</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"vim\">Vim</h2>\n<p><a href=\"https://realpython.com/vim-and-python-a-match-made-in-heaven/#verifying-your-vim-install\" target=\"_blank\" rel=\"noopener\">vim for python</a></p>\n<h4 id=\"sp-vs-分屏\">. sp / vs 分屏</h4>\n<ul>\n<li><p>sp / vs 后 <tab> 检索打开的文件</p></li>\n<li><p>垂直方向分屏： sp <filename></p></li>\n<li><p>水平方向分屏：vs <filename></p></li>\n</ul>\n<h4 id=\"ls-b-阅览与打开历史打开文件\">. ls / b 阅览与打开历史打开文件</h4>\n<ul>\n<li><p>打开最近打开列表:：ls</p></li>\n<li><p>打开对应编号的文件：b <buffer nubmer></p></li>\n</ul>\n<h4 id=\"空格折叠\">. 空格折叠</h4>\n<ul>\n<li>.vimrc: nnoremap <space> za</li>\n<li>Plugin 'tmhedberg/SimpylFold'（未安装成功）</li>\n</ul>\n<h2 id=\"git\">Git</h2>\n<p>http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</p>\n<figure>\n<img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png\" alt=\"img\" /><figcaption>img</figcaption>\n</figure>\n<h4 id=\"新建代码库\">新建代码库</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录新建一个Git代码库</span></span><br><span class=\"line\">$ git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class=\"line\">$ git init [project-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载一个项目和它的整个代码历史</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> [url]</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置\">配置</h4>\n<p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前的Git配置</span></span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 编辑Git配置文件</span></span><br><span class=\"line\">$ git config -e [--global]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 设置提交代码时的用户信息</span></span><br><span class=\"line\">$ git config [--global] user.name <span class=\"string\">\"[name]\"</span></span><br><span class=\"line\">$ git config [--global] user.email <span class=\"string\">\"[email address]\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"增加删除文件\">增加/删除文件</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加指定文件到暂存区</span></span><br><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加指定目录到暂存区，包括子目录</span></span><br><span class=\"line\">$ git add [dir]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加每个变化前，都会要求确认</span></span><br><span class=\"line\"><span class=\"comment\"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class=\"line\">$ git add -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class=\"line\">$ git rm [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class=\"line\">$ git rm --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class=\"line\">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>\n<h4 id=\"代码提交\">代码提交</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区</span></span><br><span class=\"line\">$ git commit -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区的指定文件到仓库区</span></span><br><span class=\"line\">$ git commit [file1] [file2] ... -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class=\"line\">$ git commit -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交时显示所有diff信息</span></span><br><span class=\"line\">$ git commit -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用一次新的commit，替代上一次提交</span></span><br><span class=\"line\"><span class=\"comment\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class=\"line\">$ git commit --amend -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class=\"line\">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n<h4 id=\"分支\">分支</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有本地分支</span></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有远程分支</span></span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有本地分支和远程分支</span></span><br><span class=\"line\">$ git branch -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\">$ git branch [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，并切换到该分支</span></span><br><span class=\"line\">$ git checkout -b [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向指定commit</span></span><br><span class=\"line\">$ git branch [branch] [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class=\"line\">$ git branch --track [branch] [remote-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到指定分支，并更新工作区</span></span><br><span class=\"line\">$ git checkout [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到上一个分支</span></span><br><span class=\"line\">$ git checkout -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class=\"line\">$ git branch --<span class=\"built_in\">set</span>-upstream [branch] [remote-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支</span></span><br><span class=\"line\">$ git merge [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选择一个commit，合并进当前分支</span></span><br><span class=\"line\">$ git cherry-pick [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">$ git branch -d [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">$ git push origin --delete [branch-name]</span><br><span class=\"line\">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>\n<h4 id=\"标签\">标签</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有tag</span></span><br><span class=\"line\">$ git tag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在当前commit</span></span><br><span class=\"line\">$ git tag [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在指定commit</span></span><br><span class=\"line\">$ git tag [tag] [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除本地tag</span></span><br><span class=\"line\">$ git tag -d [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程tag</span></span><br><span class=\"line\">$ git push origin :refs/tags/[tagName]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看tag信息</span></span><br><span class=\"line\">$ git show [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交指定tag</span></span><br><span class=\"line\">$ git push [remote] [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交所有tag</span></span><br><span class=\"line\">$ git push [remote] --tags</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向某个tag</span></span><br><span class=\"line\">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看信息\">查看信息</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示有变更的文件</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示当前分支的版本历史</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搜索提交历史，根据关键词</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -S [keyword]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> [tag] HEAD --pretty=format:%s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> [tag] HEAD --grep feature</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --follow [file]</span><br><span class=\"line\">$ git whatchanged [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示指定文件相关的每一次diff</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -p [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示过去5次提交</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -5 --pretty --oneline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class=\"line\">$ git shortlog -sn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class=\"line\">$ git blame [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和工作区的差异</span></span><br><span class=\"line\">$ git diff</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和上一个commit的差异</span></span><br><span class=\"line\">$ git diff --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class=\"line\">$ git diff HEAD</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示两次提交之间的差异</span></span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示今天你写了多少行代码</span></span><br><span class=\"line\">$ git diff --shortstat <span class=\"string\">\"@&#123;0 day ago&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交的元数据和内容变化</span></span><br><span class=\"line\">$ git show [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交发生变化的文件</span></span><br><span class=\"line\">$ git show --name-only [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交时，某个文件的内容</span></span><br><span class=\"line\">$ git show [commit]:[filename]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示当前分支的最近几次提交</span></span><br><span class=\"line\">$ git reflog</span><br></pre></td></tr></table></figure>\n<h4 id=\"远程同步\">远程同步</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载远程仓库的所有变动</span></span><br><span class=\"line\">$ git fetch [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有远程仓库</span></span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个远程仓库的信息</span></span><br><span class=\"line\">$ git remote show [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 增加一个新的远程仓库，并命名</span></span><br><span class=\"line\">$ git remote add [shortname] [url]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class=\"line\">$ git pull [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传本地指定分支到远程仓库</span></span><br><span class=\"line\">$ git push [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class=\"line\">$ git push [remote] --force</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送所有分支到远程仓库</span></span><br><span class=\"line\">$ git push [remote] --all</span><br></pre></td></tr></table></figure>\n<h4 id=\"撤销\">撤销</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区</span></span><br><span class=\"line\">$ git checkout [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class=\"line\">$ git checkout [commit] [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复暂存区的所有文件到工作区</span></span><br><span class=\"line\">$ git checkout .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class=\"line\">$ git reset [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class=\"line\">$ git reset --hard</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class=\"line\">$ git reset [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class=\"line\">$ git reset --hard [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class=\"line\">$ git reset --keep [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个commit，用来撤销指定commit</span></span><br><span class=\"line\"><span class=\"comment\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class=\"line\">$ git revert [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class=\"line\">$ git stash</span><br><span class=\"line\">$ git stash pop</span><br></pre></td></tr></table></figure>\n<h4 id=\"其他\">其他</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成一个可供发布的压缩包</span></span><br><span class=\"line\">$ git archive</span><br></pre></td></tr></table></figure>\n<h2 id=\"pacman\">pacman</h2>\n<p><code>sudo pacman-mirrors --fasttrack &amp;&amp; sudo pacman -Syyu</code></p>\n<p><code>pacman -S package_name        # 安装软件   pacman -S extra/package_name  # 安装不同仓库中的版本 pacman -Syu                   # 升级整个系统，y是更新数据库，yy是强制更新，u是升级软件 pacman -Ss string             # 在包数据库中查询软件 pacman -Si package_name       # 显示软件的详细信息 pacman -Sc                    # 清除软件缓存，即/var/cache/pacman/pkg目录下的文件 pacman -R package_name        # 删除单个软件 pacman -Rs package_name       # 删除指定软件及其没有被其他已安装软件使用的依赖关系 pacman -Qs string             # 查询已安装的软件包 pacman -Qi package_name       # 查询本地安装包的详细信息 pacman -Ql package_name       # 获取已安装软件所包含的文件的列表 pacman -U package.tar.zx      # 从本地文件安装 pactree package_name          # 显示软件的依赖树</code></p>\n<p>列出已经安装的软件包👇</p>\n<p>pacman -Q 查看virtualbox包是否已经安装👇</p>\n<p>pacman -Q virtualbox 查看已安装的包virtualbox的详细信息👇</p>\n<p>pacman -Qi virtualbox 列出已安装包virtualbox的所有文件👇</p>\n<p>pacman -Ql virtualbox 查找某个文件属于哪个包👇</p>\n<p>pacman -Qo /etc/passwd 查询包组👇</p>\n<p>pacman -Sg 查询包组所包含的软件包👇</p>\n<p>pacman -Sg gnome 搜索virtualbox相关的包👇</p>\n<p>pacman -Ss virtualbox 从数据库中搜索virtualbox的信息👇</p>\n<p><strong>pacman -Si virtualbox</strong> <strong>仅同步源👇</strong></p>\n<p><strong>sudo pacman -Sy</strong> <strong>更新系统👇</strong></p>\n<p><strong>sudo pacman -Su</strong> <strong>同步源并更新系统👇</strong></p>\n<p><strong>sudo pacman -Syu</strong> <strong>同步源后安装包👇</strong></p>\n<p>sudo pacman -Sy virtualbox 从本地数据库中获取virtualbox的信息，并下载安装👇</p>\n<p>sudo pacman -S virtualbox 强制安装virtualbox包👇</p>\n<p>sudo pacman -Sf virtualbox 删除virtualbox👇</p>\n<p>sudo pacman -R virtualbox 强制删除被依赖的包（慎用）👇</p>\n<p>sudo pacman -Rd virtualbox 删除virtualbox包及依赖其的包👇</p>\n<p>sudo pacman -Rc virtualbox 删除virtualbox包及其依赖的包👇</p>\n<p>sudo pacman -Rsc virtualbox 清理/var/cache/pacman/pkg目录下的旧包👇</p>\n<p>sudo pacman -Sc 清除所有下载的包和数据库👇</p>\n<p>sudo pacman -Scc 安装下载的virtualbox包（有时候需要降级包的时候就用这个）👇</p>\n<p>cd /var/cache/pacman/pkg</p>\n<p>sudo pacman -U virtualbox-5.2.12-1-x86_64.pkg.tar.xz 升级时不升级virtualbox包👇</p>\n<p>sudo pacman -Su --ignore virtualbox 详细请转向：https://wiki.archlinux.org/index.php/Pacman_(简体中文)</p>\n<h2 id=\"conda\">conda</h2>\n<p>0.获取版本号 conda --version</p>\n<p>或</p>\n<p>​ conda -V</p>\n<p>1.获取帮助 conda --help conda -h 查看某一命令的帮助，如update命令及remove命令 conda update --help conda remove --help 同理，以上命令中的--help也可以换成-h。</p>\n<p>2.环境管理 查看环境管理的全部命令帮助 conda env -h</p>\n<p>创建环境 conda create --name your_env_name 输入y确认创建。</p>\n<p>创建制定python版本的环境 conda create --name your_env_name python=2.7 conda create --name your_env_name python=3 conda create --name your_env_name python=3.5</p>\n<p>创建包含某些包的环境 conda create --name your_env_name numpy scipy</p>\n<p>创建指定python版本下包含某些包的环境 conda create --name your_env_name python=3.5 numpy scipy</p>\n<p>列举当前所有环境 conda info --envs conda env list</p>\n<p>进入某个环境 activate your_env_name</p>\n<p>退出当前环境 deactivate</p>\n<p>复制某个环境 conda create --name new_env_name --clone old_env_name</p>\n<p>删除某个环境 conda remove --name your_env_name --all</p>\n<p>4.包管理 列举当前活跃环境下的所有包 conda list</p>\n<p>列举一个非当前活跃环境下的所有包 conda list -n your_env_name</p>\n<p>为指定环境安装某个包 conda install -n env_name package_name</p>\n<p>如果不能通过conda install来安装，文档中提到可以从Anaconda.org安装，但我觉得会更习惯用pip直接安装。pip在Anaconda中已安装好，不需要单独为每个环境安装pip。如需要用pip管理包，activate环境后直接使用即可。</p>\n<p>5.清理包</p>\n<p>​ conda clean --all</p>\n<h2 id=\"reboot\">Reboot</h2>\n<p>.i3/config</p>\n<p>~/.zshrc</p>\n<p>~/command.md</p>\n<p><del>/etc/fstab</del></p>\n<p>~/.vimrc</p>\n<p>ganglion 挂载</p>\n<p>smb://ganglion/disk1</p>\n<h2 id=\"for-nvidia-gpu\">For Nvidia-GPU</h2>\n<p>https://blog.csdn.net/qq_39828850/article/details/87919188</p>\n<h2 id=\"section\"></h2>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"command-line\">Command Line</h2>\n<ul>\n<li>列出目录下的所有文件夹的及文件，规整\n<ul>\n<li>ls -laR /etc/X11/</li>\n</ul></li>\n<li>查看安装的驱动\n<ul>\n<li>inxi -G</li>\n</ul></li>\n<li>查看各文件大小\n<ul>\n<li>du [-abcDhHklmsSx] [-L <符号连接>][-X <文件>][--block-size][--exclude=<目录或文件>] [--max-depth=<目录层数>][--help][--version][目录或文件]</li>\n<li>eg. sudo du -h --max-depth=1</li>\n</ul></li>\n<li>smb://ganglion/disk1</li>\n</ul>\n<h2 id=\"docker\">Docker</h2>\n<p><a href=\"https://wiki.archlinux.org/index.php/Docker_(简体中文)\" target=\"_blank\" rel=\"noopener\">https://wiki.archlinux.org/index.php/Docker_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>\n<p>https://zhuanlan.zhihu.com/p/65696014</p>\n<p>https://blog.csdn.net/github_36749622/article/details/83094601</p>\n<h2 id=\"colab\">Colab</h2>\n<p>https://medium.com/deep-learning-turkey/google-colab-free-gpu-tutorial-e113627b9f5d</p>\n<p>https://juejin.im/post/5c05e1bc518825689f1b4948</p>\n<ul>\n<li><p>设置GPU</p></li>\n<li><p>授权和切换工作路径</p></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!apt-get install -y -qq software-properties-common python-software-properties module-init-tools</span><br><span class=\"line\">!add-apt-repository -y ppa:alessandro-strada/ppa 2&gt;&amp;1 &gt; /dev/null</span><br><span class=\"line\">!apt-get update -qq 2&gt;&amp;1 &gt; /dev/null</span><br><span class=\"line\">!apt-get -y install -qq google-drive-ocamlfuse fuse</span><br><span class=\"line\">from google.colab import auth</span><br><span class=\"line\">auth.authenticate_user()</span><br><span class=\"line\">from oauth2client.client import GoogleCredentials</span><br><span class=\"line\">creds = GoogleCredentials.get_application_default()</span><br><span class=\"line\">import getpass</span><br><span class=\"line\">!google-drive-ocamlfuse -headless -id=&#123;creds.client_id&#125; -secret=&#123;creds.client_secret&#125; &lt; /dev/null 2&gt;&amp;1 | grep URL</span><br><span class=\"line\">vcode = getpass.getpass()</span><br><span class=\"line\">!<span class=\"built_in\">echo</span> &#123;vcode&#125; | google-drive-ocamlfuse -headless -id=&#123;creds.client_id&#125; -secret=&#123;creds.client_secret&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">!mkdir -p drive</span><br><span class=\"line\">!google-drive-ocamlfuse drive</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\">path &#x3D; &quot;&#x2F;content&#x2F;drive&#x2F;OpenNMT&#x2F;...(dirs...)&quot;</span><br><span class=\"line\">os.chdir(path)</span><br><span class=\"line\">os.listdir(path)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装anaconda环境，配置conda env <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;facebookresearch.github.io&#x2F;TensorComprehensions&#x2F;installation_colab_research.html</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"vim\">Vim</h2>\n<p><a href=\"https://realpython.com/vim-and-python-a-match-made-in-heaven/#verifying-your-vim-install\" target=\"_blank\" rel=\"noopener\">vim for python</a></p>\n<h4 id=\"sp-vs-分屏\">. sp / vs 分屏</h4>\n<ul>\n<li><p>sp / vs 后 <tab> 检索打开的文件</p></li>\n<li><p>垂直方向分屏： sp <filename></p></li>\n<li><p>水平方向分屏：vs <filename></p></li>\n</ul>\n<h4 id=\"ls-b-阅览与打开历史打开文件\">. ls / b 阅览与打开历史打开文件</h4>\n<ul>\n<li><p>打开最近打开列表:：ls</p></li>\n<li><p>打开对应编号的文件：b <buffer nubmer></p></li>\n</ul>\n<h4 id=\"空格折叠\">. 空格折叠</h4>\n<ul>\n<li>.vimrc: nnoremap <space> za</li>\n<li>Plugin 'tmhedberg/SimpylFold'（未安装成功）</li>\n</ul>\n<h2 id=\"git\">Git</h2>\n<p>http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</p>\n<figure>\n<img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png\" alt=\"img\" /><figcaption>img</figcaption>\n</figure>\n<h4 id=\"新建代码库\">新建代码库</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录新建一个Git代码库</span></span><br><span class=\"line\">$ git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class=\"line\">$ git init [project-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载一个项目和它的整个代码历史</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> [url]</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置\">配置</h4>\n<p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前的Git配置</span></span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 编辑Git配置文件</span></span><br><span class=\"line\">$ git config -e [--global]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 设置提交代码时的用户信息</span></span><br><span class=\"line\">$ git config [--global] user.name <span class=\"string\">\"[name]\"</span></span><br><span class=\"line\">$ git config [--global] user.email <span class=\"string\">\"[email address]\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"增加删除文件\">增加/删除文件</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加指定文件到暂存区</span></span><br><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加指定目录到暂存区，包括子目录</span></span><br><span class=\"line\">$ git add [dir]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加每个变化前，都会要求确认</span></span><br><span class=\"line\"><span class=\"comment\"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class=\"line\">$ git add -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class=\"line\">$ git rm [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class=\"line\">$ git rm --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class=\"line\">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>\n<h4 id=\"代码提交\">代码提交</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区</span></span><br><span class=\"line\">$ git commit -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区的指定文件到仓库区</span></span><br><span class=\"line\">$ git commit [file1] [file2] ... -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class=\"line\">$ git commit -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交时显示所有diff信息</span></span><br><span class=\"line\">$ git commit -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用一次新的commit，替代上一次提交</span></span><br><span class=\"line\"><span class=\"comment\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class=\"line\">$ git commit --amend -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class=\"line\">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n<h4 id=\"分支\">分支</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有本地分支</span></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有远程分支</span></span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有本地分支和远程分支</span></span><br><span class=\"line\">$ git branch -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\">$ git branch [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，并切换到该分支</span></span><br><span class=\"line\">$ git checkout -b [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向指定commit</span></span><br><span class=\"line\">$ git branch [branch] [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class=\"line\">$ git branch --track [branch] [remote-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到指定分支，并更新工作区</span></span><br><span class=\"line\">$ git checkout [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到上一个分支</span></span><br><span class=\"line\">$ git checkout -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class=\"line\">$ git branch --<span class=\"built_in\">set</span>-upstream [branch] [remote-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支</span></span><br><span class=\"line\">$ git merge [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选择一个commit，合并进当前分支</span></span><br><span class=\"line\">$ git cherry-pick [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">$ git branch -d [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">$ git push origin --delete [branch-name]</span><br><span class=\"line\">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>\n<h4 id=\"标签\">标签</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有tag</span></span><br><span class=\"line\">$ git tag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在当前commit</span></span><br><span class=\"line\">$ git tag [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在指定commit</span></span><br><span class=\"line\">$ git tag [tag] [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除本地tag</span></span><br><span class=\"line\">$ git tag -d [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程tag</span></span><br><span class=\"line\">$ git push origin :refs/tags/[tagName]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看tag信息</span></span><br><span class=\"line\">$ git show [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交指定tag</span></span><br><span class=\"line\">$ git push [remote] [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交所有tag</span></span><br><span class=\"line\">$ git push [remote] --tags</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向某个tag</span></span><br><span class=\"line\">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看信息\">查看信息</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示有变更的文件</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示当前分支的版本历史</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搜索提交历史，根据关键词</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -S [keyword]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> [tag] HEAD --pretty=format:%s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> [tag] HEAD --grep feature</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --follow [file]</span><br><span class=\"line\">$ git whatchanged [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示指定文件相关的每一次diff</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -p [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示过去5次提交</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -5 --pretty --oneline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class=\"line\">$ git shortlog -sn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class=\"line\">$ git blame [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和工作区的差异</span></span><br><span class=\"line\">$ git diff</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和上一个commit的差异</span></span><br><span class=\"line\">$ git diff --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class=\"line\">$ git diff HEAD</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示两次提交之间的差异</span></span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示今天你写了多少行代码</span></span><br><span class=\"line\">$ git diff --shortstat <span class=\"string\">\"@&#123;0 day ago&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交的元数据和内容变化</span></span><br><span class=\"line\">$ git show [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交发生变化的文件</span></span><br><span class=\"line\">$ git show --name-only [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交时，某个文件的内容</span></span><br><span class=\"line\">$ git show [commit]:[filename]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示当前分支的最近几次提交</span></span><br><span class=\"line\">$ git reflog</span><br></pre></td></tr></table></figure>\n<h4 id=\"远程同步\">远程同步</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载远程仓库的所有变动</span></span><br><span class=\"line\">$ git fetch [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有远程仓库</span></span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个远程仓库的信息</span></span><br><span class=\"line\">$ git remote show [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 增加一个新的远程仓库，并命名</span></span><br><span class=\"line\">$ git remote add [shortname] [url]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class=\"line\">$ git pull [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传本地指定分支到远程仓库</span></span><br><span class=\"line\">$ git push [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class=\"line\">$ git push [remote] --force</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送所有分支到远程仓库</span></span><br><span class=\"line\">$ git push [remote] --all</span><br></pre></td></tr></table></figure>\n<h4 id=\"撤销\">撤销</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区</span></span><br><span class=\"line\">$ git checkout [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class=\"line\">$ git checkout [commit] [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复暂存区的所有文件到工作区</span></span><br><span class=\"line\">$ git checkout .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class=\"line\">$ git reset [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class=\"line\">$ git reset --hard</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class=\"line\">$ git reset [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class=\"line\">$ git reset --hard [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class=\"line\">$ git reset --keep [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个commit，用来撤销指定commit</span></span><br><span class=\"line\"><span class=\"comment\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class=\"line\">$ git revert [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class=\"line\">$ git stash</span><br><span class=\"line\">$ git stash pop</span><br></pre></td></tr></table></figure>\n<h4 id=\"其他\">其他</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成一个可供发布的压缩包</span></span><br><span class=\"line\">$ git archive</span><br></pre></td></tr></table></figure>\n<h2 id=\"pacman\">pacman</h2>\n<p><code>sudo pacman-mirrors --fasttrack &amp;&amp; sudo pacman -Syyu</code></p>\n<p><code>pacman -S package_name        # 安装软件   pacman -S extra/package_name  # 安装不同仓库中的版本 pacman -Syu                   # 升级整个系统，y是更新数据库，yy是强制更新，u是升级软件 pacman -Ss string             # 在包数据库中查询软件 pacman -Si package_name       # 显示软件的详细信息 pacman -Sc                    # 清除软件缓存，即/var/cache/pacman/pkg目录下的文件 pacman -R package_name        # 删除单个软件 pacman -Rs package_name       # 删除指定软件及其没有被其他已安装软件使用的依赖关系 pacman -Qs string             # 查询已安装的软件包 pacman -Qi package_name       # 查询本地安装包的详细信息 pacman -Ql package_name       # 获取已安装软件所包含的文件的列表 pacman -U package.tar.zx      # 从本地文件安装 pactree package_name          # 显示软件的依赖树</code></p>\n<p>列出已经安装的软件包👇</p>\n<p>pacman -Q 查看virtualbox包是否已经安装👇</p>\n<p>pacman -Q virtualbox 查看已安装的包virtualbox的详细信息👇</p>\n<p>pacman -Qi virtualbox 列出已安装包virtualbox的所有文件👇</p>\n<p>pacman -Ql virtualbox 查找某个文件属于哪个包👇</p>\n<p>pacman -Qo /etc/passwd 查询包组👇</p>\n<p>pacman -Sg 查询包组所包含的软件包👇</p>\n<p>pacman -Sg gnome 搜索virtualbox相关的包👇</p>\n<p>pacman -Ss virtualbox 从数据库中搜索virtualbox的信息👇</p>\n<p><strong>pacman -Si virtualbox</strong> <strong>仅同步源👇</strong></p>\n<p><strong>sudo pacman -Sy</strong> <strong>更新系统👇</strong></p>\n<p><strong>sudo pacman -Su</strong> <strong>同步源并更新系统👇</strong></p>\n<p><strong>sudo pacman -Syu</strong> <strong>同步源后安装包👇</strong></p>\n<p>sudo pacman -Sy virtualbox 从本地数据库中获取virtualbox的信息，并下载安装👇</p>\n<p>sudo pacman -S virtualbox 强制安装virtualbox包👇</p>\n<p>sudo pacman -Sf virtualbox 删除virtualbox👇</p>\n<p>sudo pacman -R virtualbox 强制删除被依赖的包（慎用）👇</p>\n<p>sudo pacman -Rd virtualbox 删除virtualbox包及依赖其的包👇</p>\n<p>sudo pacman -Rc virtualbox 删除virtualbox包及其依赖的包👇</p>\n<p>sudo pacman -Rsc virtualbox 清理/var/cache/pacman/pkg目录下的旧包👇</p>\n<p>sudo pacman -Sc 清除所有下载的包和数据库👇</p>\n<p>sudo pacman -Scc 安装下载的virtualbox包（有时候需要降级包的时候就用这个）👇</p>\n<p>cd /var/cache/pacman/pkg</p>\n<p>sudo pacman -U virtualbox-5.2.12-1-x86_64.pkg.tar.xz 升级时不升级virtualbox包👇</p>\n<p>sudo pacman -Su --ignore virtualbox 详细请转向：https://wiki.archlinux.org/index.php/Pacman_(简体中文)</p>\n<h2 id=\"conda\">conda</h2>\n<p>0.获取版本号 conda --version</p>\n<p>或</p>\n<p>​ conda -V</p>\n<p>1.获取帮助 conda --help conda -h 查看某一命令的帮助，如update命令及remove命令 conda update --help conda remove --help 同理，以上命令中的--help也可以换成-h。</p>\n<p>2.环境管理 查看环境管理的全部命令帮助 conda env -h</p>\n<p>创建环境 conda create --name your_env_name 输入y确认创建。</p>\n<p>创建制定python版本的环境 conda create --name your_env_name python=2.7 conda create --name your_env_name python=3 conda create --name your_env_name python=3.5</p>\n<p>创建包含某些包的环境 conda create --name your_env_name numpy scipy</p>\n<p>创建指定python版本下包含某些包的环境 conda create --name your_env_name python=3.5 numpy scipy</p>\n<p>列举当前所有环境 conda info --envs conda env list</p>\n<p>进入某个环境 activate your_env_name</p>\n<p>退出当前环境 deactivate</p>\n<p>复制某个环境 conda create --name new_env_name --clone old_env_name</p>\n<p>删除某个环境 conda remove --name your_env_name --all</p>\n<p>4.包管理 列举当前活跃环境下的所有包 conda list</p>\n<p>列举一个非当前活跃环境下的所有包 conda list -n your_env_name</p>\n<p>为指定环境安装某个包 conda install -n env_name package_name</p>\n<p>如果不能通过conda install来安装，文档中提到可以从Anaconda.org安装，但我觉得会更习惯用pip直接安装。pip在Anaconda中已安装好，不需要单独为每个环境安装pip。如需要用pip管理包，activate环境后直接使用即可。</p>\n<p>5.清理包</p>\n<p>​ conda clean --all</p>\n<h2 id=\"reboot\">Reboot</h2>\n<p>.i3/config</p>\n<p>~/.zshrc</p>\n<p>~/command.md</p>\n<p><del>/etc/fstab</del></p>\n<p>~/.vimrc</p>\n<p>ganglion 挂载</p>\n<p>smb://ganglion/disk1</p>\n<h2 id=\"for-nvidia-gpu\">For Nvidia-GPU</h2>\n<p>https://blog.csdn.net/qq_39828850/article/details/87919188</p>\n<h2 id=\"section\"></h2>\n"},{"title":"Foreign Accent Conversion by Synthesizing Speech  from Phonetic Posteriorgrams 2019","date":"2020-01-15T15:00:00.000Z","_content":"\n## Foreign Accent Conversion by Synthesizing Speech  from Phonetic Posteriorgrams 2019.7\n\n> [译]从PPGs合成语音进行外国口音转换\n>\n> https://www.semanticscholar.org/paper/Foreign-Accent-Conversion-by-Synthesizing-Speech-Zhao-Ding/8386d03827eabc8446883cd16e46ef10d3d318d4\n\n### 0. 摘要\n\n外国人口音转换(FAC)目标是生成一个语音听起来与被给的非母语者相似，但是拥有母语者的口音。过去的FAC方法在合成时借用了来自参考语句(母语)的激励信息（F0  and  aperiodicity;  pro-duced  by  a  conventional  vocoder）。使用这样的方法，合成的声音保留了母语者声音质量的一些方面。我们展示了一种方法，摒弃了过去使用的Vocoder与母语者的激励(excitation)。我们的方法使用一个在母语者语料上训练的声学模型用于抽取独立于说话者(Speaker-independent)的PPGs，而后训练一个语音合成器将来自非母语者的PPGs映射到对应的谱特征上，该谱特征可以通过一个高质量的神经Vocoder依次转换为声音波形。运行时，我们使用从母语者语句中抽取的PPGs作为参照驱动合成器^{1}^。听力测试表明，与基线系统相比，该系统产生的语音更清晰、更自然、更接近非母语者，同时显著降低了非母语者的感知外国口音。\n\n> {1} 用native的PPGs训练合成器\n>\n> {注1}模型组成：1. 语音识别模型用于抽取非母语者的PPGs | 2. 语音合成器用于将抽取出的非母语者PPGs合成为与母语者更相似口音的谱 | 3. Vocoder\n>\n> {注2}训练部分：SR模型与合成器都使用native数据训练\n>\n> {注3}转换部分：输入non-native语音片段，得到与母语口音更相似的新片段。\n\n**关键字：**phonetic  posteriorgram,  acoustic  modeling, speech synthesis, accent conversion \n\n### 00. 图片\n\n![](/images/FAC1.png)\n\n<img src=\"/images/FAC2.png\" style=\"zoom: 80%;\" />\n\n### 1. 概述\n\nFAC的目标是创造一个新的声音用于被给的非母语者的音质{1}及母语者的发音模式（如，韵律和停顿）。它可以通过结合来自母语语音片段的口音相关特征<u>(accent-related  cues, arc)</u>和非母语者的音质来实现。FAC可以应用于电脑辅助的发音训练，在其中充当模型声音用于模仿。\n\nFAC的主要挑战是如何从语音信号中分离arc与音质。已有多种解决方案被提出，包括语音变形[3，6-8]、帧配对[1，9]和发音合成[2，10-12]。这些方法可以减少非母语者的口音，但都有许多局限。<u>语音变形</u>合成的语音常常听起来像是不同于任何说话者的第三者说的。<u>帧配对</u>方法可以合成类似于非母语者语音的语音，但合成保留了母语者音质的某些方面；这是因为母语者的激励信息（excitation information）被用在了语音合成中。最后，<u>发音合成</u>需要专门的设备来收集发音数据，因此在实际应用中并不实用。\n\n> {1} In  the  context  of  FAC,  we  use  **voice  quality**  to  refer  solely the organic aspects of a speaker’s voice, e.g., pitch range, vo-cal tract dimensions. \n>\n> {注} FAC的三种传统方法：语音变形[3，6-8]、帧配对[1，9]和发音合成[2，10-12]\n\n在这项工作中，我们建议在不依赖说话者的语音丰富语音嵌入--语音后验图（PPGs）中执行FAC[13]。<u>PPG被定义为每一个语音帧属于一组预先定义好的音素单元 (phonemes  or  triphones/senones)的后验概率，其包含了语句的语言信息和语音信息。</u> 我们的方法具体工作如下。==第一步==，我们使用独立于说话者的在大型母语语音基础上训练的声学模型为非母语者生成一个PPGs。==随后，==我们构建一个Seq2Seq的语音合成器用于抓取非母语者的音质。这个合成器使用来自非母语者的PPGs序列作为输入，处理得到对应的梅尔谱图(Mel-spectrogram)作为输出。==最后，==我们训练一个神经语音编码器(Vocoder)，WaveGlow，用于将梅尔谱图转化为原始的声学信号。{!!}在测试中，我们向合成器中输入一个来自<u>母语者</u>的PPG序列。输出结果包含母语者的发音模式以及非母语者的音质。提出系统的工作流程总览见Figure 1。\n\n> {!!}如果是这样的系统根本没法做到直接去使用\n>\n> {注} 也就是说整个训练过程都是一个对说话者音质的建模\n>\n> {思考}那如何对单一母语者的重音特点/发音模式建模呢？\n\n\n\n该提出的系统有三个优点。首先，它消除了从母语参考语音中借用激励信息(excitation information)的需要，从而防止了母语者语音质量的某些方面渗入到合成语音中。第二，我们的系统不需要任何训练数据来自母语的参考说话者。因此，我们可以在测试中灵活的使用任何参考语音。第三，我们的系统通过一个顺序到顺序的模型捕获上下文信息，该模型在多个任务上显示了最先进的性能，在次帮助下获得了更好的音质。\n\n### 2. 相关工作\n\n> {机翻}\n\n口音转换的早期尝试使用语音变形[3，6-8]通过混合来自母语和非母语说话者的频谱成分来控制口音的程度。 在[18，19]中，作者使用PSOLA修改了口音语音的持续时间和音高模式。 Aryal和Gutierrez-Osuna [1]修改了语音转换（VC）技术，将动态时间规整（DTW）替换为根据声道长度归一化后基于源和目标帧的MFCC相似度来匹配源和目标帧的技术。 后来， Zhao et  al. [9]使用PPG相似度代替MFCC相似度用于配对声帧。 \n\nPPG已应用于许多任务，例如，基于神经网络的语音识别[20，21]，语音检测[13]，发音错误[22]和个性化TTS [23]。 PPG在VC中也引起了很多关注。 Xie et al. [24]将来自目标说话者的PPG划分为群集，然后将来自源说话者的PPG映射到目标说话者的最近群集。 Sun et al. [25]使用PPG进行多对一语音转换。 Miyoshi et al. [26]扩展了基于PPG的VC框架，以包括使用LSTM在源PPG和目标PPG之间的映射。 与不包含PPG映射过程的基准相比，他们获得了更好的语音个性评级，但音频质量较差。Zhang et  al. [15]将源说话者的瓶颈特征和梅尔谱图串联起来，然后使用序列到序列模型将源梅尔谱图转换为目标说话者的谱图，最后使用WaveNet [27]恢复语音波形。 声码器。 他们的模型需要并行录音，并且需要为每个扬声器对训练一个新模型。 然后，他们应用文本监督[28]解决了转换后语音中的一些错误发音和伪影。 最近，Zhou et al. [29]采用双语PPG进行跨语言语音转换。\n\n### 3. 方法\n\n我们的系统由三个主要构建组成；一个独立于说话者的声学模型(acoustic model, AM)用于抽取PPGs，一个非母语说话者的语音合成器用于将PPGs转换为梅尔谱图，和一个WaveGlow声码器用于实施地从梅尔谱生成语音波形。\n\n#### 3.1. AM与PPG抽取\n\n我们使用具有多个隐藏层和p范数非线性的DNN作为AM。我们在一个母语语音语料库上，通过最小化output与由一个预训练的GMM-HMM强制对准器获得的{!}senone label的交叉熵，来训练AM。在母语语音上训练对我们的任务来说是至关重要，因为母语和非母语的帧必须在母语语音空间中匹配。\n\n> {!}用的是senone，(phonemes  or  triphones/senones)\n\n#### 3.2. PPG2Mel\n\n​\t\t我们使用改良的Tacotron 2  [32]将来自非母语者的PPG转换为它们相应的梅尔频谱图。\n\n{1-1}原始的Tacotron 2模型采用字符(characters)的one-hot矢量表示(vector representation)，并将其传递到encoder LSTM，后者将其转换为隐藏的表示(hidden representation)，然后将其传递到具有位置敏感注意机制的decoder LSTM [33]，来预测字符的梅尔谱图。{左蓝↑4->右橙↑2,3}\n\n{1-2}为了提高模型性能，将character embedding经过多个卷积层后，再输入到enconder LSTM中。{左蓝↑1,2,3layers}\n\n{1-3}Decoder在将预测的mel谱图传递给attention之前附加一个PreNet（two fully connected  layers），而后decoder LSTM提取结构信息。{右橙↑1,2}\n\n{1-4}它还在解码器之后应用了PostNet（multiple 1-D convolutional  layers）用于预测频谱细节并将其添加到原始预测中。{右橙↑4}\n\n> {1} Tacotron 2理论![img](/images/20190212211055433.jpg)\n\n​\t\t{2}在这里的工作中，我们使用(包含two fully connected hidden layers with the ReLU nonlinearity)<u>PPG-embedding network (PPG PreNet)</u>替代<u>character-embedding layer</u>。这个PPG-embedding network 与Tacotron 2中的PreNet相似，将原始输入的高维度的PPGs变换为低维度的bottleneck  features。这一步对模型的收敛至关重要。PPG2Mel 转换模型详见Figure 2。\n\n> {2}使用PPGs作为输入代替字符\n\n​\t\t{3}原始的Tacotron 2 接收一个字符序列作为输入，显然这要比我们的PPG序列短。例如每一个我们语料库的句子平均包含41个字符，然而PPG序列却有几百帧。因此，原始的Tacotron 2注意机制会被如此长的输入序列所混淆，并导致PPG和声音序列之间的不一致，例如 [15]。结果，推论将是病态的，并且将产生不可理解的语音。{3-1}一种解决该问题的方法是使用更短的PPG序列训练PPG2Mel模型。例如，一种是可以用词组代替句子。然而，这种解决方法有一些问题。首先，为了获得正确的词语边界，我们需要强制对其训练的句子，这需要获取转码。第二，更重要的是，使用短片段训练进行长输入序列的预测会导致模型失败，例如[33]。\n\n​\t\t<u>{3-2}我们通过在注意机制中添加一个局部约束来解决这个问题</u>。语音信号具有很强的时间连续性和渐进性。为来抓取语音上下文，我们只需要在局部的小窗口中观察PPGs。受此启发，在训练过程中的每一个解码步骤中，我们都将注意力机制限制为查看隐藏状态序列中的窗口，而不是查看完整序列。我们正式定义这个约束如下。定义$d_i$为decoder LSTM的第$i$步输出，$y_i$为预测出的声学特征(是对$d_i$应用线性投影后的output)，$h = [h_1,...,h_T]$是来自encoder的hidden states的整个序列。应用局部敏感的注意机制，我们得到，![](/home/fuu/arch/typ_tmp/f1.png)\n\n这里的$s_{i-1}$是attention LSTM第(i-1)步的hidden state，$g_i$是attention context,\n\n![](/images/f2.png)\n\n![](/images/f3.png)\n\n都是attention weights。attention scores $e_{ij}$计算方法如下\n\n![](/images/f4.png)\n\n这里 $v, W, V, U, b$ 都是attention module的可学习参数（learnable parameters）。$F$ 包含$k$个一维(1-D)可学习的带有$r$-dims的内核，$f_i^j ∈ R^k$ 是在$j$ 位置上将 $F$ 与 $a_{i-1}$ 卷积的结果。\n\n现在，为了<u>实施局部性约束</u>，我们只考虑以当前帧为中心的固定窗口中的隐藏表示，例如：\n\n![](/images/f5.png)\n\n这里的$w$ 是窗口大小，接着\n\n![](/images/f6.png)\n\nPPG2Mel模型的损失函数如下：\n\n![](/images/f7.png)\n\n这里$G_{mel}$ 是真实值的mel-spectrogram；$P_{Decoder}$ 和$P_{PostNet}$ 是分别来自decoder（after linear projection) 和PostNet。$G_{stop}$ 是真实的stop token，$P_{stop}$ 是预测的stop token；$CE(∙)$ 是交叉熵损失；$\\alpha, \\beta, \\gamma$ 控制每个损失项的相对重要性。\n\n> {3}由于序列过长导致注意力机制出错\n>\n> {3-2}解决方法：将注意力机制限制为查看隐藏状态序列中的窗口，而不是查看完整序列\n>\n> {3-2}详述了attention方法的基本原理!!!\n\n#### 3.3 Mel2speech\n\n我们使用WaveGlow声码器将语音合成器的输出转换回语音波形。WaveGlow是一个flow-based的[35]网络，能够从mel频谱图生成高质量的语音（与Wave Net相当）。它从零均值球面高斯（方差$\\sigma$）中抽取与期望输出具有相同维数的样本，并将这些样本通过一系列层，这些层将简单分布转换为具有期望分布的分布。训练一个声码器的情况下，我们使用WaveGlow对mel谱图上的音频样本分布进行建模。WaveGlow只需一个神经网络就可以实现实时的推理，而WaveNet由于其自回归特性，需要很长的时间来合成一个话语。有关WaveGlow声码器的更多详细信息，请参阅[14]。\n\n### 4. 实验和结果\n\n#### 4.1 实验步骤\n\n我们使用<u>*Librispeech corpus*</u>[30]来训练AM。该语料库包含960hrs的英文母语语音， 大多数是来自北美的。AM有五个隐藏层和一个有5816个senones的输出层。我们在两个来自<u>*L2-ARCTIC*</u>的非母语者语料上^{1}^训练PPG2Mel和WaveGlow模型。我们使用Audacity[36]对原始的L2-ARCTIC记录进行降噪处理，目的是去除环境背景的噪声。对于母语参考语音，我们使用了来自<u>*ARCTIC*</u>语料库[37]的两名北美说话者BDL（M）和CLB（F）[37]。 L2-ARCTIC和ARCTIC的每个发言者都收录了相同的一组1132个句子，或大约一个小时的演讲时间。对于每一个L2-ARCTIC的说话人，我们使用前1032个句子进行模型训练，接下来的50个句子用于验证，剩下的50个句子用于测试。所有音频信号均在16 KHz下采样。我们使用了80个滤波器组，以10ms的位移和64ms的窗口来提取mel谱图。也以10ms的位移提取PPG。\n\n> {注-1} 本段说明了语料信息，和样本处理方法\n>\n> {1}关于非母语者语料的描述：YKWK (na-tive male Korean speaker)  and ZHAA (native female Arabic speaker) from the publicly-available L2-ARCTIC corpus [34]. \n\n在**Table 1.**中总结了<u>PPG2Mel模型</u>的参数。我们使用6的批量大小(batch size)和1×10 -4的学习率(learning rate)。 $\\alpha,\\beta,\\gamma$ 分别根据经验设置为1.0、1.0和0.005。 注意机制的局部性约束的窗口大小 $\\omega$ 设置为20。我们训练模型，直到验证损失达到平稳（〜8h）。 \n\n对于<u>WaveGlow模型</u>，我们根据[14]的建议在训练过程中将 $\\sigma$ 设置为0.701，在测试过程中将 $\\sigma$ 设置为0.6。 批次大小为3，学习率为1×10 -4。 训练模型直到收敛（约一天）。 所有模型都在单个Nvidia GTX 1070 GPU上进行了训练。\n\n<img src=\"/images/FACt1.png\" style=\"zoom: 67%;\" />\n\n使用Kaldi训练AM，及其他模型用PyTorch上实现，使用Adam optimizer训练。更多细节和音频样本，请参考https://github.com/guanlongzhao/fac-via-ppg。\n\n> {注-2}本段说明了部分模型参数\n\n我们将提出的系统与如下构建的baseline[9]进行比较。首先，我们计算每个native和non-native frames 的PPG。然后，我们在PPG空间中只用symmetric KL divergence对最接近的native帧和non-native帧进行配对。在最后一步中，我们从帧对中提取Mel倒谱系数（MCEPs）来训练joint-density GMM（JD-GMM）spectral  conversion ，如[39]所述。然后，我们使用JD-GMM转换了native MCEPs，以匹配非母语者的voice quality。最后，我们使用STRAIGHT Vocoder[40]从转换后的MCEPs结合母语者的非周期性（aperiodicity，AP）和F0（归一化为非母语者的音调范围(pitch range）来合成语音。我们在基线系统中使用了同样的1032个发音训练集。GMM包含128个混合矩阵和全协方差矩阵。我们使用24维MCEPs（不包括MCEP0）和Δ特征。所有特征均以10ms位移和25ms窗口直线提取。对于每个系统都使用说话者BDL-YKWK和CLB-ZHAA语料做重音转换。\n\n> {注-3}baseline system的构建方法。\n\n#### 4.2 结果\n\n> [半机翻]\n\n我们进行三种听力测试来比较系统的表现： 音频质量和自然度的Mean  Opinion  Score  (MOS) 测试，声音相似度测试，口音测试。所有测试都在Amazon Mechanical Turk上进行，所有的参与者都是美国居民。每一个测试，来自不同系统的每个说话者的25个语句对（总共50个）被随机选择。样本的出现顺序在所有实验中都是随机的。\n\n音频质量和自然度的MOS测试的分数是五分制的（1-bad, 2-poor,  3-fair,  4-good, 5-excellent）。音频质量和自然度的MOS分别描述了语音的清晰度和与人类的相似度。这两个测量是从不重叠的听众群体中获得的，以避免偏见。每个音频样本至少收到17个分数。听众还将对同一组北极和L2北极原始录音进行评分以作为参考。结果汇总在**Table 2.**和**Table 3.**中。值得注意的是，在[9]中，我们确定了基线系统的音频质量MOS比使用DTW进行帧配对的传统JD-GMM系统大约高0.4。因此，我们的基线比传统的JD-GMM更强。\n\n<img src=\"/images/df.png\" style=\"zoom:67%;\" />\n\n在所有情况下，我们的系统在音质和自然度方面都明显优于基线。尽管这两个系统的音频质量MOS都要低于原始记录(语料库的原始音频)，但在自然度MOS上，无论是ARCTIC（$p$=0.35）还是L2-ARCTIC（$p$=0.54），使用双尾双样本t检验，提出的系统都没有显著差异。\n\n在语音相似性测试中，给听者提供了三个话语，即原始的非母语话语和来自两个系统的合成语，并要求他们选择哪一个合成语听起来更像非母语者。参与者还被要求在做出选择时，用7分制（1分表示完全不自信，7分表示极度自信）来评定他们的置信水平。参与者被要求在执行任务时忽略口音。在每次试验中，来自两个系统的样本的呈现顺序是平衡的，17名参与者对音频样本进行评级。结果见**Table 4.**。在72.47%的案例中，听者以3.4的置信水平（高于“somewhat  confident”）选择提议的系统，而在其余27.53%的案例中，听者以低很多的置信评分（1.05，或“完全不置信”）选择基线系统。\n\n![](/images/sf6.png)\n\n在口音测试中，参与者被要求用九分制（1分为非外国口音，9分为非常强的外国口音）对外国口音的程度进行评分，这是发音文献中常用的方法[43]。每个音频样本由18个人评分。结果汇总在表5中。ARCTIC 说话者的原始话语被评为“没有外国口音”（1.20），而L2-ARCTIC 说话者的原始话语被评为重口音（7.17）。基线系统（2.94）和提议的系统（3.93）与第二语言北极语相比显著降低了外国口音，但被评为比本国口音更重。令人惊讶的是，我们的系统生成的语音被评为比基线系统更重的口音；有关此结果的潜在解释，请参见讨论部分。\n\n![](/images/fa6.png)\n\n### 5. 讨论与结论\n\n提出的AC系统处理的语音要好于基线系统，这得益于它使用了最先进的Seq2Seq模型(a modified Tacotron2)将PPGs转换为Mel-spectrograms，同时使用了一个神经声码器(neural vocoder)直接从mel谱图生成音频信号。该方法利用了语音信号的时变特性，避免了传统的基于信号处理的会降低了合成质量的声码器的使用。我们还提出了一种易于实现的注意机制的局部约束，使PPG-to-Mel模型在话语层面(utterance-level)样本上可训练。请注意，我们的MOS数值低于原始Tacotron 2和WaveGlow纸张中的MOS数值，这主要是因为它们的系统接受了24倍以上的数据训练。<u>提高系统MOS数值的一个未来方向是联合训练PPG-to-Mel和WaveGlow模型。</u>{1}\n\n> {1}如何提高MOS值\n\n与从母语者那里借用激励信息（F0，AP）的基线形成对比，我们的系统直接从合成后的mel谱图中生成了非原生说话者的激励。 这样可以防止母语使用者的语音质量渗入到合成中，使合成语音与非母语使用者的音质更加相似。\n\n我们的系统从本地PPG序列中提取母语的发音模式，因此使合成语音的口音明显低于非母语的语音。与基线系统相比，口音(accentedness)评分的轻微增加可能是两个因素的结果。{2}首先，AM(acoustic model)在提取PPG时不可避免地会产生识别错误，这些错误将在合成中反映为发音错误。其次，该模型没有明确地模拟重音和语调模式，因此，我们发现一些合成结果有意想不到的语调。因此，在未来的工作中，我们计划将信息整合到建模过程中；{2-1}<u>一种可能的解决方法是在训练和测试PPG-to-Mel模型时，将PPG序列置于一个标准化的F0循环(contour)中。</u>\n\n> {2}为什么出现口音评分反而轻微增加的情况\n>\n> {2}原因：模型存在AM系统识别不稳定，及没有明确对母语发音建模的问题\n>\n> {2-1}上述问题可能的解决方法\n\n目前，{3}PPG-to-Mel和WaveGlow模型需要非母语者至少一小时的语音。<u>可以使用多说话人TTS的迁移学习范式来减轻这一需求。</u>{4}AC的最终目标是在合成时消除对参考音的需要，即获取非母语者的语音并自动减少其口音。<u>这可以通过学习一个从非母语者的PPG序列到母语者的PPG序列的Seq2Seq的映射来实现，然后使用这个口音减少的PPG序列驱动PPG2Mel合成器。</u>\n\n> {3}如何简单训练数据负担 {3-1}通过一些迁移学习范式\n>\n> {4}如何在合成时消除对参考音的需要 {4-1}直接学习一种Seq2Seq的映射\n\n### \n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Foreign Accent Conversion by Synthesizing Speech  from Phonetic Posteriorgrams.md","raw":"---\ntitle:  Foreign Accent Conversion by Synthesizing Speech  from Phonetic Posteriorgrams 2019 \ndate: 2020-01-16\ntags:\n- accent conversion\n- PPGs\n- speech synthesis\n- acoustic modeling\ncategories:\n- accent conversion\n---\n\n## Foreign Accent Conversion by Synthesizing Speech  from Phonetic Posteriorgrams 2019.7\n\n> [译]从PPGs合成语音进行外国口音转换\n>\n> https://www.semanticscholar.org/paper/Foreign-Accent-Conversion-by-Synthesizing-Speech-Zhao-Ding/8386d03827eabc8446883cd16e46ef10d3d318d4\n\n### 0. 摘要\n\n外国人口音转换(FAC)目标是生成一个语音听起来与被给的非母语者相似，但是拥有母语者的口音。过去的FAC方法在合成时借用了来自参考语句(母语)的激励信息（F0  and  aperiodicity;  pro-duced  by  a  conventional  vocoder）。使用这样的方法，合成的声音保留了母语者声音质量的一些方面。我们展示了一种方法，摒弃了过去使用的Vocoder与母语者的激励(excitation)。我们的方法使用一个在母语者语料上训练的声学模型用于抽取独立于说话者(Speaker-independent)的PPGs，而后训练一个语音合成器将来自非母语者的PPGs映射到对应的谱特征上，该谱特征可以通过一个高质量的神经Vocoder依次转换为声音波形。运行时，我们使用从母语者语句中抽取的PPGs作为参照驱动合成器^{1}^。听力测试表明，与基线系统相比，该系统产生的语音更清晰、更自然、更接近非母语者，同时显著降低了非母语者的感知外国口音。\n\n> {1} 用native的PPGs训练合成器\n>\n> {注1}模型组成：1. 语音识别模型用于抽取非母语者的PPGs | 2. 语音合成器用于将抽取出的非母语者PPGs合成为与母语者更相似口音的谱 | 3. Vocoder\n>\n> {注2}训练部分：SR模型与合成器都使用native数据训练\n>\n> {注3}转换部分：输入non-native语音片段，得到与母语口音更相似的新片段。\n\n**关键字：**phonetic  posteriorgram,  acoustic  modeling, speech synthesis, accent conversion \n\n### 00. 图片\n\n![](/images/FAC1.png)\n\n<img src=\"/images/FAC2.png\" style=\"zoom: 80%;\" />\n\n### 1. 概述\n\nFAC的目标是创造一个新的声音用于被给的非母语者的音质{1}及母语者的发音模式（如，韵律和停顿）。它可以通过结合来自母语语音片段的口音相关特征<u>(accent-related  cues, arc)</u>和非母语者的音质来实现。FAC可以应用于电脑辅助的发音训练，在其中充当模型声音用于模仿。\n\nFAC的主要挑战是如何从语音信号中分离arc与音质。已有多种解决方案被提出，包括语音变形[3，6-8]、帧配对[1，9]和发音合成[2，10-12]。这些方法可以减少非母语者的口音，但都有许多局限。<u>语音变形</u>合成的语音常常听起来像是不同于任何说话者的第三者说的。<u>帧配对</u>方法可以合成类似于非母语者语音的语音，但合成保留了母语者音质的某些方面；这是因为母语者的激励信息（excitation information）被用在了语音合成中。最后，<u>发音合成</u>需要专门的设备来收集发音数据，因此在实际应用中并不实用。\n\n> {1} In  the  context  of  FAC,  we  use  **voice  quality**  to  refer  solely the organic aspects of a speaker’s voice, e.g., pitch range, vo-cal tract dimensions. \n>\n> {注} FAC的三种传统方法：语音变形[3，6-8]、帧配对[1，9]和发音合成[2，10-12]\n\n在这项工作中，我们建议在不依赖说话者的语音丰富语音嵌入--语音后验图（PPGs）中执行FAC[13]。<u>PPG被定义为每一个语音帧属于一组预先定义好的音素单元 (phonemes  or  triphones/senones)的后验概率，其包含了语句的语言信息和语音信息。</u> 我们的方法具体工作如下。==第一步==，我们使用独立于说话者的在大型母语语音基础上训练的声学模型为非母语者生成一个PPGs。==随后，==我们构建一个Seq2Seq的语音合成器用于抓取非母语者的音质。这个合成器使用来自非母语者的PPGs序列作为输入，处理得到对应的梅尔谱图(Mel-spectrogram)作为输出。==最后，==我们训练一个神经语音编码器(Vocoder)，WaveGlow，用于将梅尔谱图转化为原始的声学信号。{!!}在测试中，我们向合成器中输入一个来自<u>母语者</u>的PPG序列。输出结果包含母语者的发音模式以及非母语者的音质。提出系统的工作流程总览见Figure 1。\n\n> {!!}如果是这样的系统根本没法做到直接去使用\n>\n> {注} 也就是说整个训练过程都是一个对说话者音质的建模\n>\n> {思考}那如何对单一母语者的重音特点/发音模式建模呢？\n\n\n\n该提出的系统有三个优点。首先，它消除了从母语参考语音中借用激励信息(excitation information)的需要，从而防止了母语者语音质量的某些方面渗入到合成语音中。第二，我们的系统不需要任何训练数据来自母语的参考说话者。因此，我们可以在测试中灵活的使用任何参考语音。第三，我们的系统通过一个顺序到顺序的模型捕获上下文信息，该模型在多个任务上显示了最先进的性能，在次帮助下获得了更好的音质。\n\n### 2. 相关工作\n\n> {机翻}\n\n口音转换的早期尝试使用语音变形[3，6-8]通过混合来自母语和非母语说话者的频谱成分来控制口音的程度。 在[18，19]中，作者使用PSOLA修改了口音语音的持续时间和音高模式。 Aryal和Gutierrez-Osuna [1]修改了语音转换（VC）技术，将动态时间规整（DTW）替换为根据声道长度归一化后基于源和目标帧的MFCC相似度来匹配源和目标帧的技术。 后来， Zhao et  al. [9]使用PPG相似度代替MFCC相似度用于配对声帧。 \n\nPPG已应用于许多任务，例如，基于神经网络的语音识别[20，21]，语音检测[13]，发音错误[22]和个性化TTS [23]。 PPG在VC中也引起了很多关注。 Xie et al. [24]将来自目标说话者的PPG划分为群集，然后将来自源说话者的PPG映射到目标说话者的最近群集。 Sun et al. [25]使用PPG进行多对一语音转换。 Miyoshi et al. [26]扩展了基于PPG的VC框架，以包括使用LSTM在源PPG和目标PPG之间的映射。 与不包含PPG映射过程的基准相比，他们获得了更好的语音个性评级，但音频质量较差。Zhang et  al. [15]将源说话者的瓶颈特征和梅尔谱图串联起来，然后使用序列到序列模型将源梅尔谱图转换为目标说话者的谱图，最后使用WaveNet [27]恢复语音波形。 声码器。 他们的模型需要并行录音，并且需要为每个扬声器对训练一个新模型。 然后，他们应用文本监督[28]解决了转换后语音中的一些错误发音和伪影。 最近，Zhou et al. [29]采用双语PPG进行跨语言语音转换。\n\n### 3. 方法\n\n我们的系统由三个主要构建组成；一个独立于说话者的声学模型(acoustic model, AM)用于抽取PPGs，一个非母语说话者的语音合成器用于将PPGs转换为梅尔谱图，和一个WaveGlow声码器用于实施地从梅尔谱生成语音波形。\n\n#### 3.1. AM与PPG抽取\n\n我们使用具有多个隐藏层和p范数非线性的DNN作为AM。我们在一个母语语音语料库上，通过最小化output与由一个预训练的GMM-HMM强制对准器获得的{!}senone label的交叉熵，来训练AM。在母语语音上训练对我们的任务来说是至关重要，因为母语和非母语的帧必须在母语语音空间中匹配。\n\n> {!}用的是senone，(phonemes  or  triphones/senones)\n\n#### 3.2. PPG2Mel\n\n​\t\t我们使用改良的Tacotron 2  [32]将来自非母语者的PPG转换为它们相应的梅尔频谱图。\n\n{1-1}原始的Tacotron 2模型采用字符(characters)的one-hot矢量表示(vector representation)，并将其传递到encoder LSTM，后者将其转换为隐藏的表示(hidden representation)，然后将其传递到具有位置敏感注意机制的decoder LSTM [33]，来预测字符的梅尔谱图。{左蓝↑4->右橙↑2,3}\n\n{1-2}为了提高模型性能，将character embedding经过多个卷积层后，再输入到enconder LSTM中。{左蓝↑1,2,3layers}\n\n{1-3}Decoder在将预测的mel谱图传递给attention之前附加一个PreNet（two fully connected  layers），而后decoder LSTM提取结构信息。{右橙↑1,2}\n\n{1-4}它还在解码器之后应用了PostNet（multiple 1-D convolutional  layers）用于预测频谱细节并将其添加到原始预测中。{右橙↑4}\n\n> {1} Tacotron 2理论![img](/images/20190212211055433.jpg)\n\n​\t\t{2}在这里的工作中，我们使用(包含two fully connected hidden layers with the ReLU nonlinearity)<u>PPG-embedding network (PPG PreNet)</u>替代<u>character-embedding layer</u>。这个PPG-embedding network 与Tacotron 2中的PreNet相似，将原始输入的高维度的PPGs变换为低维度的bottleneck  features。这一步对模型的收敛至关重要。PPG2Mel 转换模型详见Figure 2。\n\n> {2}使用PPGs作为输入代替字符\n\n​\t\t{3}原始的Tacotron 2 接收一个字符序列作为输入，显然这要比我们的PPG序列短。例如每一个我们语料库的句子平均包含41个字符，然而PPG序列却有几百帧。因此，原始的Tacotron 2注意机制会被如此长的输入序列所混淆，并导致PPG和声音序列之间的不一致，例如 [15]。结果，推论将是病态的，并且将产生不可理解的语音。{3-1}一种解决该问题的方法是使用更短的PPG序列训练PPG2Mel模型。例如，一种是可以用词组代替句子。然而，这种解决方法有一些问题。首先，为了获得正确的词语边界，我们需要强制对其训练的句子，这需要获取转码。第二，更重要的是，使用短片段训练进行长输入序列的预测会导致模型失败，例如[33]。\n\n​\t\t<u>{3-2}我们通过在注意机制中添加一个局部约束来解决这个问题</u>。语音信号具有很强的时间连续性和渐进性。为来抓取语音上下文，我们只需要在局部的小窗口中观察PPGs。受此启发，在训练过程中的每一个解码步骤中，我们都将注意力机制限制为查看隐藏状态序列中的窗口，而不是查看完整序列。我们正式定义这个约束如下。定义$d_i$为decoder LSTM的第$i$步输出，$y_i$为预测出的声学特征(是对$d_i$应用线性投影后的output)，$h = [h_1,...,h_T]$是来自encoder的hidden states的整个序列。应用局部敏感的注意机制，我们得到，![](/home/fuu/arch/typ_tmp/f1.png)\n\n这里的$s_{i-1}$是attention LSTM第(i-1)步的hidden state，$g_i$是attention context,\n\n![](/images/f2.png)\n\n![](/images/f3.png)\n\n都是attention weights。attention scores $e_{ij}$计算方法如下\n\n![](/images/f4.png)\n\n这里 $v, W, V, U, b$ 都是attention module的可学习参数（learnable parameters）。$F$ 包含$k$个一维(1-D)可学习的带有$r$-dims的内核，$f_i^j ∈ R^k$ 是在$j$ 位置上将 $F$ 与 $a_{i-1}$ 卷积的结果。\n\n现在，为了<u>实施局部性约束</u>，我们只考虑以当前帧为中心的固定窗口中的隐藏表示，例如：\n\n![](/images/f5.png)\n\n这里的$w$ 是窗口大小，接着\n\n![](/images/f6.png)\n\nPPG2Mel模型的损失函数如下：\n\n![](/images/f7.png)\n\n这里$G_{mel}$ 是真实值的mel-spectrogram；$P_{Decoder}$ 和$P_{PostNet}$ 是分别来自decoder（after linear projection) 和PostNet。$G_{stop}$ 是真实的stop token，$P_{stop}$ 是预测的stop token；$CE(∙)$ 是交叉熵损失；$\\alpha, \\beta, \\gamma$ 控制每个损失项的相对重要性。\n\n> {3}由于序列过长导致注意力机制出错\n>\n> {3-2}解决方法：将注意力机制限制为查看隐藏状态序列中的窗口，而不是查看完整序列\n>\n> {3-2}详述了attention方法的基本原理!!!\n\n#### 3.3 Mel2speech\n\n我们使用WaveGlow声码器将语音合成器的输出转换回语音波形。WaveGlow是一个flow-based的[35]网络，能够从mel频谱图生成高质量的语音（与Wave Net相当）。它从零均值球面高斯（方差$\\sigma$）中抽取与期望输出具有相同维数的样本，并将这些样本通过一系列层，这些层将简单分布转换为具有期望分布的分布。训练一个声码器的情况下，我们使用WaveGlow对mel谱图上的音频样本分布进行建模。WaveGlow只需一个神经网络就可以实现实时的推理，而WaveNet由于其自回归特性，需要很长的时间来合成一个话语。有关WaveGlow声码器的更多详细信息，请参阅[14]。\n\n### 4. 实验和结果\n\n#### 4.1 实验步骤\n\n我们使用<u>*Librispeech corpus*</u>[30]来训练AM。该语料库包含960hrs的英文母语语音， 大多数是来自北美的。AM有五个隐藏层和一个有5816个senones的输出层。我们在两个来自<u>*L2-ARCTIC*</u>的非母语者语料上^{1}^训练PPG2Mel和WaveGlow模型。我们使用Audacity[36]对原始的L2-ARCTIC记录进行降噪处理，目的是去除环境背景的噪声。对于母语参考语音，我们使用了来自<u>*ARCTIC*</u>语料库[37]的两名北美说话者BDL（M）和CLB（F）[37]。 L2-ARCTIC和ARCTIC的每个发言者都收录了相同的一组1132个句子，或大约一个小时的演讲时间。对于每一个L2-ARCTIC的说话人，我们使用前1032个句子进行模型训练，接下来的50个句子用于验证，剩下的50个句子用于测试。所有音频信号均在16 KHz下采样。我们使用了80个滤波器组，以10ms的位移和64ms的窗口来提取mel谱图。也以10ms的位移提取PPG。\n\n> {注-1} 本段说明了语料信息，和样本处理方法\n>\n> {1}关于非母语者语料的描述：YKWK (na-tive male Korean speaker)  and ZHAA (native female Arabic speaker) from the publicly-available L2-ARCTIC corpus [34]. \n\n在**Table 1.**中总结了<u>PPG2Mel模型</u>的参数。我们使用6的批量大小(batch size)和1×10 -4的学习率(learning rate)。 $\\alpha,\\beta,\\gamma$ 分别根据经验设置为1.0、1.0和0.005。 注意机制的局部性约束的窗口大小 $\\omega$ 设置为20。我们训练模型，直到验证损失达到平稳（〜8h）。 \n\n对于<u>WaveGlow模型</u>，我们根据[14]的建议在训练过程中将 $\\sigma$ 设置为0.701，在测试过程中将 $\\sigma$ 设置为0.6。 批次大小为3，学习率为1×10 -4。 训练模型直到收敛（约一天）。 所有模型都在单个Nvidia GTX 1070 GPU上进行了训练。\n\n<img src=\"/images/FACt1.png\" style=\"zoom: 67%;\" />\n\n使用Kaldi训练AM，及其他模型用PyTorch上实现，使用Adam optimizer训练。更多细节和音频样本，请参考https://github.com/guanlongzhao/fac-via-ppg。\n\n> {注-2}本段说明了部分模型参数\n\n我们将提出的系统与如下构建的baseline[9]进行比较。首先，我们计算每个native和non-native frames 的PPG。然后，我们在PPG空间中只用symmetric KL divergence对最接近的native帧和non-native帧进行配对。在最后一步中，我们从帧对中提取Mel倒谱系数（MCEPs）来训练joint-density GMM（JD-GMM）spectral  conversion ，如[39]所述。然后，我们使用JD-GMM转换了native MCEPs，以匹配非母语者的voice quality。最后，我们使用STRAIGHT Vocoder[40]从转换后的MCEPs结合母语者的非周期性（aperiodicity，AP）和F0（归一化为非母语者的音调范围(pitch range）来合成语音。我们在基线系统中使用了同样的1032个发音训练集。GMM包含128个混合矩阵和全协方差矩阵。我们使用24维MCEPs（不包括MCEP0）和Δ特征。所有特征均以10ms位移和25ms窗口直线提取。对于每个系统都使用说话者BDL-YKWK和CLB-ZHAA语料做重音转换。\n\n> {注-3}baseline system的构建方法。\n\n#### 4.2 结果\n\n> [半机翻]\n\n我们进行三种听力测试来比较系统的表现： 音频质量和自然度的Mean  Opinion  Score  (MOS) 测试，声音相似度测试，口音测试。所有测试都在Amazon Mechanical Turk上进行，所有的参与者都是美国居民。每一个测试，来自不同系统的每个说话者的25个语句对（总共50个）被随机选择。样本的出现顺序在所有实验中都是随机的。\n\n音频质量和自然度的MOS测试的分数是五分制的（1-bad, 2-poor,  3-fair,  4-good, 5-excellent）。音频质量和自然度的MOS分别描述了语音的清晰度和与人类的相似度。这两个测量是从不重叠的听众群体中获得的，以避免偏见。每个音频样本至少收到17个分数。听众还将对同一组北极和L2北极原始录音进行评分以作为参考。结果汇总在**Table 2.**和**Table 3.**中。值得注意的是，在[9]中，我们确定了基线系统的音频质量MOS比使用DTW进行帧配对的传统JD-GMM系统大约高0.4。因此，我们的基线比传统的JD-GMM更强。\n\n<img src=\"/images/df.png\" style=\"zoom:67%;\" />\n\n在所有情况下，我们的系统在音质和自然度方面都明显优于基线。尽管这两个系统的音频质量MOS都要低于原始记录(语料库的原始音频)，但在自然度MOS上，无论是ARCTIC（$p$=0.35）还是L2-ARCTIC（$p$=0.54），使用双尾双样本t检验，提出的系统都没有显著差异。\n\n在语音相似性测试中，给听者提供了三个话语，即原始的非母语话语和来自两个系统的合成语，并要求他们选择哪一个合成语听起来更像非母语者。参与者还被要求在做出选择时，用7分制（1分表示完全不自信，7分表示极度自信）来评定他们的置信水平。参与者被要求在执行任务时忽略口音。在每次试验中，来自两个系统的样本的呈现顺序是平衡的，17名参与者对音频样本进行评级。结果见**Table 4.**。在72.47%的案例中，听者以3.4的置信水平（高于“somewhat  confident”）选择提议的系统，而在其余27.53%的案例中，听者以低很多的置信评分（1.05，或“完全不置信”）选择基线系统。\n\n![](/images/sf6.png)\n\n在口音测试中，参与者被要求用九分制（1分为非外国口音，9分为非常强的外国口音）对外国口音的程度进行评分，这是发音文献中常用的方法[43]。每个音频样本由18个人评分。结果汇总在表5中。ARCTIC 说话者的原始话语被评为“没有外国口音”（1.20），而L2-ARCTIC 说话者的原始话语被评为重口音（7.17）。基线系统（2.94）和提议的系统（3.93）与第二语言北极语相比显著降低了外国口音，但被评为比本国口音更重。令人惊讶的是，我们的系统生成的语音被评为比基线系统更重的口音；有关此结果的潜在解释，请参见讨论部分。\n\n![](/images/fa6.png)\n\n### 5. 讨论与结论\n\n提出的AC系统处理的语音要好于基线系统，这得益于它使用了最先进的Seq2Seq模型(a modified Tacotron2)将PPGs转换为Mel-spectrograms，同时使用了一个神经声码器(neural vocoder)直接从mel谱图生成音频信号。该方法利用了语音信号的时变特性，避免了传统的基于信号处理的会降低了合成质量的声码器的使用。我们还提出了一种易于实现的注意机制的局部约束，使PPG-to-Mel模型在话语层面(utterance-level)样本上可训练。请注意，我们的MOS数值低于原始Tacotron 2和WaveGlow纸张中的MOS数值，这主要是因为它们的系统接受了24倍以上的数据训练。<u>提高系统MOS数值的一个未来方向是联合训练PPG-to-Mel和WaveGlow模型。</u>{1}\n\n> {1}如何提高MOS值\n\n与从母语者那里借用激励信息（F0，AP）的基线形成对比，我们的系统直接从合成后的mel谱图中生成了非原生说话者的激励。 这样可以防止母语使用者的语音质量渗入到合成中，使合成语音与非母语使用者的音质更加相似。\n\n我们的系统从本地PPG序列中提取母语的发音模式，因此使合成语音的口音明显低于非母语的语音。与基线系统相比，口音(accentedness)评分的轻微增加可能是两个因素的结果。{2}首先，AM(acoustic model)在提取PPG时不可避免地会产生识别错误，这些错误将在合成中反映为发音错误。其次，该模型没有明确地模拟重音和语调模式，因此，我们发现一些合成结果有意想不到的语调。因此，在未来的工作中，我们计划将信息整合到建模过程中；{2-1}<u>一种可能的解决方法是在训练和测试PPG-to-Mel模型时，将PPG序列置于一个标准化的F0循环(contour)中。</u>\n\n> {2}为什么出现口音评分反而轻微增加的情况\n>\n> {2}原因：模型存在AM系统识别不稳定，及没有明确对母语发音建模的问题\n>\n> {2-1}上述问题可能的解决方法\n\n目前，{3}PPG-to-Mel和WaveGlow模型需要非母语者至少一小时的语音。<u>可以使用多说话人TTS的迁移学习范式来减轻这一需求。</u>{4}AC的最终目标是在合成时消除对参考音的需要，即获取非母语者的语音并自动减少其口音。<u>这可以通过学习一个从非母语者的PPG序列到母语者的PPG序列的Seq2Seq的映射来实现，然后使用这个口音减少的PPG序列驱动PPG2Mel合成器。</u>\n\n> {3}如何简单训练数据负担 {3-1}通过一些迁移学习范式\n>\n> {4}如何在合成时消除对参考音的需要 {4-1}直接学习一种Seq2Seq的映射\n\n### \n\n\n\n\n\n\n\n\n\n\n\n","slug":"Foreign Accent Conversion by Synthesizing Speech  from Phonetic Posteriorgrams","published":1,"updated":"2020-01-16T08:24:14.792Z","_id":"ck5ggwrf4000l2dpk1oa65dab","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"foreign-accent-conversion-by-synthesizing-speech-from-phonetic-posteriorgrams-2019.7\">Foreign Accent Conversion by Synthesizing Speech from Phonetic Posteriorgrams 2019.7</h2>\n<blockquote>\n<p>[译]从PPGs合成语音进行外国口音转换</p>\n<p>https://www.semanticscholar.org/paper/Foreign-Accent-Conversion-by-Synthesizing-Speech-Zhao-Ding/8386d03827eabc8446883cd16e46ef10d3d318d4</p>\n</blockquote>\n<h3 id=\"摘要\">0. 摘要</h3>\n<p>外国人口音转换(FAC)目标是生成一个语音听起来与被给的非母语者相似，但是拥有母语者的口音。过去的FAC方法在合成时借用了来自参考语句(母语)的激励信息（F0 and aperiodicity; pro-duced by a conventional vocoder）。使用这样的方法，合成的声音保留了母语者声音质量的一些方面。我们展示了一种方法，摒弃了过去使用的Vocoder与母语者的激励(excitation)。我们的方法使用一个在母语者语料上训练的声学模型用于抽取独立于说话者(Speaker-independent)的PPGs，而后训练一个语音合成器将来自非母语者的PPGs映射到对应的谱特征上，该谱特征可以通过一个高质量的神经Vocoder依次转换为声音波形。运行时，我们使用从母语者语句中抽取的PPGs作为参照驱动合成器<sup>{1}</sup>。听力测试表明，与基线系统相比，该系统产生的语音更清晰、更自然、更接近非母语者，同时显著降低了非母语者的感知外国口音。</p>\n<blockquote>\n<p>{1} 用native的PPGs训练合成器</p>\n<p>{注1}模型组成：1. 语音识别模型用于抽取非母语者的PPGs | 2. 语音合成器用于将抽取出的非母语者PPGs合成为与母语者更相似口音的谱 | 3. Vocoder</p>\n<p>{注2}训练部分：SR模型与合成器都使用native数据训练</p>\n<p>{注3}转换部分：输入non-native语音片段，得到与母语口音更相似的新片段。</p>\n</blockquote>\n<p><strong>关键字：</strong>phonetic posteriorgram, acoustic modeling, speech synthesis, accent conversion</p>\n<h3 id=\"图片\">00. 图片</h3>\n<p><img src=\"/images/FAC1.png\" /></p>\n<p><img src=\"/images/FAC2.png\" style=\"zoom: 80%;\" /></p>\n<h3 id=\"概述\">1. 概述</h3>\n<p>FAC的目标是创造一个新的声音用于被给的非母语者的音质{1}及母语者的发音模式（如，韵律和停顿）。它可以通过结合来自母语语音片段的口音相关特征<u>(accent-related cues, arc)</u>和非母语者的音质来实现。FAC可以应用于电脑辅助的发音训练，在其中充当模型声音用于模仿。</p>\n<p>FAC的主要挑战是如何从语音信号中分离arc与音质。已有多种解决方案被提出，包括语音变形[3，6-8]、帧配对[1，9]和发音合成[2，10-12]。这些方法可以减少非母语者的口音，但都有许多局限。<u>语音变形</u>合成的语音常常听起来像是不同于任何说话者的第三者说的。<u>帧配对</u>方法可以合成类似于非母语者语音的语音，但合成保留了母语者音质的某些方面；这是因为母语者的激励信息（excitation information）被用在了语音合成中。最后，<u>发音合成</u>需要专门的设备来收集发音数据，因此在实际应用中并不实用。</p>\n<blockquote>\n<p>{1} In the context of FAC, we use <strong>voice quality</strong> to refer solely the organic aspects of a speaker’s voice, e.g., pitch range, vo-cal tract dimensions.</p>\n<p>{注} FAC的三种传统方法：语音变形[3，6-8]、帧配对[1，9]和发音合成[2，10-12]</p>\n</blockquote>\n<p>在这项工作中，我们建议在不依赖说话者的语音丰富语音嵌入--语音后验图（PPGs）中执行FAC[13]。<u>PPG被定义为每一个语音帧属于一组预先定义好的音素单元 (phonemes or triphones/senones)的后验概率，其包含了语句的语言信息和语音信息。</u> 我们的方法具体工作如下。==第一步==，我们使用独立于说话者的在大型母语语音基础上训练的声学模型为非母语者生成一个PPGs。==随后，==我们构建一个Seq2Seq的语音合成器用于抓取非母语者的音质。这个合成器使用来自非母语者的PPGs序列作为输入，处理得到对应的梅尔谱图(Mel-spectrogram)作为输出。==最后，==我们训练一个神经语音编码器(Vocoder)，WaveGlow，用于将梅尔谱图转化为原始的声学信号。{!!}在测试中，我们向合成器中输入一个来自<u>母语者</u>的PPG序列。输出结果包含母语者的发音模式以及非母语者的音质。提出系统的工作流程总览见Figure 1。</p>\n<blockquote>\n<p>{!!}如果是这样的系统根本没法做到直接去使用</p>\n<p>{注} 也就是说整个训练过程都是一个对说话者音质的建模</p>\n<p>{思考}那如何对单一母语者的重音特点/发音模式建模呢？</p>\n</blockquote>\n<p>该提出的系统有三个优点。首先，它消除了从母语参考语音中借用激励信息(excitation information)的需要，从而防止了母语者语音质量的某些方面渗入到合成语音中。第二，我们的系统不需要任何训练数据来自母语的参考说话者。因此，我们可以在测试中灵活的使用任何参考语音。第三，我们的系统通过一个顺序到顺序的模型捕获上下文信息，该模型在多个任务上显示了最先进的性能，在次帮助下获得了更好的音质。</p>\n<h3 id=\"相关工作\">2. 相关工作</h3>\n<blockquote>\n<p>{机翻}</p>\n</blockquote>\n<p>口音转换的早期尝试使用语音变形[3，6-8]通过混合来自母语和非母语说话者的频谱成分来控制口音的程度。 在[18，19]中，作者使用PSOLA修改了口音语音的持续时间和音高模式。 Aryal和Gutierrez-Osuna [1]修改了语音转换（VC）技术，将动态时间规整（DTW）替换为根据声道长度归一化后基于源和目标帧的MFCC相似度来匹配源和目标帧的技术。 后来， Zhao et al. [9]使用PPG相似度代替MFCC相似度用于配对声帧。</p>\n<p>PPG已应用于许多任务，例如，基于神经网络的语音识别[20，21]，语音检测[13]，发音错误[22]和个性化TTS [23]。 PPG在VC中也引起了很多关注。 Xie et al. [24]将来自目标说话者的PPG划分为群集，然后将来自源说话者的PPG映射到目标说话者的最近群集。 Sun et al. [25]使用PPG进行多对一语音转换。 Miyoshi et al. [26]扩展了基于PPG的VC框架，以包括使用LSTM在源PPG和目标PPG之间的映射。 与不包含PPG映射过程的基准相比，他们获得了更好的语音个性评级，但音频质量较差。Zhang et al. [15]将源说话者的瓶颈特征和梅尔谱图串联起来，然后使用序列到序列模型将源梅尔谱图转换为目标说话者的谱图，最后使用WaveNet [27]恢复语音波形。 声码器。 他们的模型需要并行录音，并且需要为每个扬声器对训练一个新模型。 然后，他们应用文本监督[28]解决了转换后语音中的一些错误发音和伪影。 最近，Zhou et al. [29]采用双语PPG进行跨语言语音转换。</p>\n<h3 id=\"方法\">3. 方法</h3>\n<p>我们的系统由三个主要构建组成；一个独立于说话者的声学模型(acoustic model, AM)用于抽取PPGs，一个非母语说话者的语音合成器用于将PPGs转换为梅尔谱图，和一个WaveGlow声码器用于实施地从梅尔谱生成语音波形。</p>\n<h4 id=\"am与ppg抽取\">3.1. AM与PPG抽取</h4>\n<p>我们使用具有多个隐藏层和p范数非线性的DNN作为AM。我们在一个母语语音语料库上，通过最小化output与由一个预训练的GMM-HMM强制对准器获得的{!}senone label的交叉熵，来训练AM。在母语语音上训练对我们的任务来说是至关重要，因为母语和非母语的帧必须在母语语音空间中匹配。</p>\n<blockquote>\n<p>{!}用的是senone，(phonemes or triphones/senones)</p>\n</blockquote>\n<h4 id=\"ppg2mel\">3.2. PPG2Mel</h4>\n<p>​ 我们使用改良的Tacotron 2 [32]将来自非母语者的PPG转换为它们相应的梅尔频谱图。</p>\n<p>{1-1}原始的Tacotron 2模型采用字符(characters)的one-hot矢量表示(vector representation)，并将其传递到encoder LSTM，后者将其转换为隐藏的表示(hidden representation)，然后将其传递到具有位置敏感注意机制的decoder LSTM [33]，来预测字符的梅尔谱图。{左蓝↑4-&gt;右橙↑2,3}</p>\n<p>{1-2}为了提高模型性能，将character embedding经过多个卷积层后，再输入到enconder LSTM中。{左蓝↑1,2,3layers}</p>\n<p>{1-3}Decoder在将预测的mel谱图传递给attention之前附加一个PreNet（two fully connected layers），而后decoder LSTM提取结构信息。{右橙↑1,2}</p>\n<p>{1-4}它还在解码器之后应用了PostNet（multiple 1-D convolutional layers）用于预测频谱细节并将其添加到原始预测中。{右橙↑4}</p>\n<blockquote>\n<p>{1} Tacotron 2理论<img src=\"/images/20190212211055433.jpg\" alt=\"img\" /></p>\n</blockquote>\n<p>​ {2}在这里的工作中，我们使用(包含two fully connected hidden layers with the ReLU nonlinearity)<u>PPG-embedding network (PPG PreNet)</u>替代<u>character-embedding layer</u>。这个PPG-embedding network 与Tacotron 2中的PreNet相似，将原始输入的高维度的PPGs变换为低维度的bottleneck features。这一步对模型的收敛至关重要。PPG2Mel 转换模型详见Figure 2。</p>\n<blockquote>\n<p>{2}使用PPGs作为输入代替字符</p>\n</blockquote>\n<p>​ {3}原始的Tacotron 2 接收一个字符序列作为输入，显然这要比我们的PPG序列短。例如每一个我们语料库的句子平均包含41个字符，然而PPG序列却有几百帧。因此，原始的Tacotron 2注意机制会被如此长的输入序列所混淆，并导致PPG和声音序列之间的不一致，例如 [15]。结果，推论将是病态的，并且将产生不可理解的语音。{3-1}一种解决该问题的方法是使用更短的PPG序列训练PPG2Mel模型。例如，一种是可以用词组代替句子。然而，这种解决方法有一些问题。首先，为了获得正确的词语边界，我们需要强制对其训练的句子，这需要获取转码。第二，更重要的是，使用短片段训练进行长输入序列的预测会导致模型失败，例如[33]。</p>\n<p>​ <u>{3-2}我们通过在注意机制中添加一个局部约束来解决这个问题</u>。语音信号具有很强的时间连续性和渐进性。为来抓取语音上下文，我们只需要在局部的小窗口中观察PPGs。受此启发，在训练过程中的每一个解码步骤中，我们都将注意力机制限制为查看隐藏状态序列中的窗口，而不是查看完整序列。我们正式定义这个约束如下。定义<span class=\"math inline\">\\(d_i\\)</span>为decoder LSTM的第<span class=\"math inline\">\\(i\\)</span>步输出，<span class=\"math inline\">\\(y_i\\)</span>为预测出的声学特征(是对<span class=\"math inline\">\\(d_i\\)</span>应用线性投影后的output)，<span class=\"math inline\">\\(h = [h_1,...,h_T]\\)</span>是来自encoder的hidden states的整个序列。应用局部敏感的注意机制，我们得到，<img src=\"/home/fuu/arch/typ_tmp/f1.png\" /></p>\n<p>这里的<span class=\"math inline\">\\(s_{i-1}\\)</span>是attention LSTM第(i-1)步的hidden state，<span class=\"math inline\">\\(g_i\\)</span>是attention context,</p>\n<p><img src=\"/images/f2.png\" /></p>\n<p><img src=\"/images/f3.png\" /></p>\n<p>都是attention weights。attention scores <span class=\"math inline\">\\(e_{ij}\\)</span>计算方法如下</p>\n<p><img src=\"/images/f4.png\" /></p>\n<p>这里 <span class=\"math inline\">\\(v, W, V, U, b\\)</span> 都是attention module的可学习参数（learnable parameters）。<span class=\"math inline\">\\(F\\)</span> 包含<span class=\"math inline\">\\(k\\)</span>个一维(1-D)可学习的带有<span class=\"math inline\">\\(r\\)</span>-dims的内核，<span class=\"math inline\">\\(f_i^j ∈ R^k\\)</span> 是在<span class=\"math inline\">\\(j\\)</span> 位置上将 <span class=\"math inline\">\\(F\\)</span> 与 <span class=\"math inline\">\\(a_{i-1}\\)</span> 卷积的结果。</p>\n<p>现在，为了<u>实施局部性约束</u>，我们只考虑以当前帧为中心的固定窗口中的隐藏表示，例如：</p>\n<p><img src=\"/images/f5.png\" /></p>\n<p>这里的<span class=\"math inline\">\\(w\\)</span> 是窗口大小，接着</p>\n<p><img src=\"/images/f6.png\" /></p>\n<p>PPG2Mel模型的损失函数如下：</p>\n<p><img src=\"/images/f7.png\" /></p>\n<p>这里<span class=\"math inline\">\\(G_{mel}\\)</span> 是真实值的mel-spectrogram；<span class=\"math inline\">\\(P_{Decoder}\\)</span> 和<span class=\"math inline\">\\(P_{PostNet}\\)</span> 是分别来自decoder（after linear projection) 和PostNet。<span class=\"math inline\">\\(G_{stop}\\)</span> 是真实的stop token，<span class=\"math inline\">\\(P_{stop}\\)</span> 是预测的stop token；<span class=\"math inline\">\\(CE(∙)\\)</span> 是交叉熵损失；<span class=\"math inline\">\\(\\alpha, \\beta, \\gamma\\)</span> 控制每个损失项的相对重要性。</p>\n<blockquote>\n<p>{3}由于序列过长导致注意力机制出错</p>\n<p>{3-2}解决方法：将注意力机制限制为查看隐藏状态序列中的窗口，而不是查看完整序列</p>\n<p>{3-2}详述了attention方法的基本原理!!!</p>\n</blockquote>\n<h4 id=\"mel2speech\">3.3 Mel2speech</h4>\n<p>我们使用WaveGlow声码器将语音合成器的输出转换回语音波形。WaveGlow是一个flow-based的[35]网络，能够从mel频谱图生成高质量的语音（与Wave Net相当）。它从零均值球面高斯（方差<span class=\"math inline\">\\(\\sigma\\)</span>）中抽取与期望输出具有相同维数的样本，并将这些样本通过一系列层，这些层将简单分布转换为具有期望分布的分布。训练一个声码器的情况下，我们使用WaveGlow对mel谱图上的音频样本分布进行建模。WaveGlow只需一个神经网络就可以实现实时的推理，而WaveNet由于其自回归特性，需要很长的时间来合成一个话语。有关WaveGlow声码器的更多详细信息，请参阅[14]。</p>\n<h3 id=\"实验和结果\">4. 实验和结果</h3>\n<h4 id=\"实验步骤\">4.1 实验步骤</h4>\n<p>我们使用<u><em>Librispeech corpus</em></u>[30]来训练AM。该语料库包含960hrs的英文母语语音， 大多数是来自北美的。AM有五个隐藏层和一个有5816个senones的输出层。我们在两个来自<u><em>L2-ARCTIC</em></u>的非母语者语料上<sup>{1}</sup>训练PPG2Mel和WaveGlow模型。我们使用Audacity[36]对原始的L2-ARCTIC记录进行降噪处理，目的是去除环境背景的噪声。对于母语参考语音，我们使用了来自<u><em>ARCTIC</em></u>语料库[37]的两名北美说话者BDL（M）和CLB（F）[37]。 L2-ARCTIC和ARCTIC的每个发言者都收录了相同的一组1132个句子，或大约一个小时的演讲时间。对于每一个L2-ARCTIC的说话人，我们使用前1032个句子进行模型训练，接下来的50个句子用于验证，剩下的50个句子用于测试。所有音频信号均在16 KHz下采样。我们使用了80个滤波器组，以10ms的位移和64ms的窗口来提取mel谱图。也以10ms的位移提取PPG。</p>\n<blockquote>\n<p>{注-1} 本段说明了语料信息，和样本处理方法</p>\n<p>{1}关于非母语者语料的描述：YKWK (na-tive male Korean speaker) and ZHAA (native female Arabic speaker) from the publicly-available L2-ARCTIC corpus [34].</p>\n</blockquote>\n<p>在<strong>Table 1.</strong>中总结了<u>PPG2Mel模型</u>的参数。我们使用6的批量大小(batch size)和1×10 -4的学习率(learning rate)。 <span class=\"math inline\">\\(\\alpha,\\beta,\\gamma\\)</span> 分别根据经验设置为1.0、1.0和0.005。 注意机制的局部性约束的窗口大小 <span class=\"math inline\">\\(\\omega\\)</span> 设置为20。我们训练模型，直到验证损失达到平稳（〜8h）。</p>\n<p>对于<u>WaveGlow模型</u>，我们根据[14]的建议在训练过程中将 <span class=\"math inline\">\\(\\sigma\\)</span> 设置为0.701，在测试过程中将 <span class=\"math inline\">\\(\\sigma\\)</span> 设置为0.6。 批次大小为3，学习率为1×10 -4。 训练模型直到收敛（约一天）。 所有模型都在单个Nvidia GTX 1070 GPU上进行了训练。</p>\n<p><img src=\"/images/FACt1.png\" style=\"zoom: 67%;\" /></p>\n<p>使用Kaldi训练AM，及其他模型用PyTorch上实现，使用Adam optimizer训练。更多细节和音频样本，请参考https://github.com/guanlongzhao/fac-via-ppg。</p>\n<blockquote>\n<p>{注-2}本段说明了部分模型参数</p>\n</blockquote>\n<p>我们将提出的系统与如下构建的baseline[9]进行比较。首先，我们计算每个native和non-native frames 的PPG。然后，我们在PPG空间中只用symmetric KL divergence对最接近的native帧和non-native帧进行配对。在最后一步中，我们从帧对中提取Mel倒谱系数（MCEPs）来训练joint-density GMM（JD-GMM）spectral conversion ，如[39]所述。然后，我们使用JD-GMM转换了native MCEPs，以匹配非母语者的voice quality。最后，我们使用STRAIGHT Vocoder[40]从转换后的MCEPs结合母语者的非周期性（aperiodicity，AP）和F0（归一化为非母语者的音调范围(pitch range）来合成语音。我们在基线系统中使用了同样的1032个发音训练集。GMM包含128个混合矩阵和全协方差矩阵。我们使用24维MCEPs（不包括MCEP0）和Δ特征。所有特征均以10ms位移和25ms窗口直线提取。对于每个系统都使用说话者BDL-YKWK和CLB-ZHAA语料做重音转换。</p>\n<blockquote>\n<p>{注-3}baseline system的构建方法。</p>\n</blockquote>\n<h4 id=\"结果\">4.2 结果</h4>\n<blockquote>\n<p>[半机翻]</p>\n</blockquote>\n<p>我们进行三种听力测试来比较系统的表现： 音频质量和自然度的Mean Opinion Score (MOS) 测试，声音相似度测试，口音测试。所有测试都在Amazon Mechanical Turk上进行，所有的参与者都是美国居民。每一个测试，来自不同系统的每个说话者的25个语句对（总共50个）被随机选择。样本的出现顺序在所有实验中都是随机的。</p>\n<p>音频质量和自然度的MOS测试的分数是五分制的（1-bad, 2-poor, 3-fair, 4-good, 5-excellent）。音频质量和自然度的MOS分别描述了语音的清晰度和与人类的相似度。这两个测量是从不重叠的听众群体中获得的，以避免偏见。每个音频样本至少收到17个分数。听众还将对同一组北极和L2北极原始录音进行评分以作为参考。结果汇总在<strong>Table 2.</strong>和<strong>Table 3.</strong>中。值得注意的是，在[9]中，我们确定了基线系统的音频质量MOS比使用DTW进行帧配对的传统JD-GMM系统大约高0.4。因此，我们的基线比传统的JD-GMM更强。</p>\n<p><img src=\"/images/df.png\" style=\"zoom:67%;\" /></p>\n<p>在所有情况下，我们的系统在音质和自然度方面都明显优于基线。尽管这两个系统的音频质量MOS都要低于原始记录(语料库的原始音频)，但在自然度MOS上，无论是ARCTIC（<span class=\"math inline\">\\(p\\)</span>=0.35）还是L2-ARCTIC（<span class=\"math inline\">\\(p\\)</span>=0.54），使用双尾双样本t检验，提出的系统都没有显著差异。</p>\n<p>在语音相似性测试中，给听者提供了三个话语，即原始的非母语话语和来自两个系统的合成语，并要求他们选择哪一个合成语听起来更像非母语者。参与者还被要求在做出选择时，用7分制（1分表示完全不自信，7分表示极度自信）来评定他们的置信水平。参与者被要求在执行任务时忽略口音。在每次试验中，来自两个系统的样本的呈现顺序是平衡的，17名参与者对音频样本进行评级。结果见<strong>Table 4.</strong>。在72.47%的案例中，听者以3.4的置信水平（高于“somewhat confident”）选择提议的系统，而在其余27.53%的案例中，听者以低很多的置信评分（1.05，或“完全不置信”）选择基线系统。</p>\n<p><img src=\"/images/sf6.png\" /></p>\n<p>在口音测试中，参与者被要求用九分制（1分为非外国口音，9分为非常强的外国口音）对外国口音的程度进行评分，这是发音文献中常用的方法[43]。每个音频样本由18个人评分。结果汇总在表5中。ARCTIC 说话者的原始话语被评为“没有外国口音”（1.20），而L2-ARCTIC 说话者的原始话语被评为重口音（7.17）。基线系统（2.94）和提议的系统（3.93）与第二语言北极语相比显著降低了外国口音，但被评为比本国口音更重。令人惊讶的是，我们的系统生成的语音被评为比基线系统更重的口音；有关此结果的潜在解释，请参见讨论部分。</p>\n<p><img src=\"/images/fa6.png\" /></p>\n<h3 id=\"讨论与结论\">5. 讨论与结论</h3>\n<p>提出的AC系统处理的语音要好于基线系统，这得益于它使用了最先进的Seq2Seq模型(a modified Tacotron2)将PPGs转换为Mel-spectrograms，同时使用了一个神经声码器(neural vocoder)直接从mel谱图生成音频信号。该方法利用了语音信号的时变特性，避免了传统的基于信号处理的会降低了合成质量的声码器的使用。我们还提出了一种易于实现的注意机制的局部约束，使PPG-to-Mel模型在话语层面(utterance-level)样本上可训练。请注意，我们的MOS数值低于原始Tacotron 2和WaveGlow纸张中的MOS数值，这主要是因为它们的系统接受了24倍以上的数据训练。<u>提高系统MOS数值的一个未来方向是联合训练PPG-to-Mel和WaveGlow模型。</u>{1}</p>\n<blockquote>\n<p>{1}如何提高MOS值</p>\n</blockquote>\n<p>与从母语者那里借用激励信息（F0，AP）的基线形成对比，我们的系统直接从合成后的mel谱图中生成了非原生说话者的激励。 这样可以防止母语使用者的语音质量渗入到合成中，使合成语音与非母语使用者的音质更加相似。</p>\n<p>我们的系统从本地PPG序列中提取母语的发音模式，因此使合成语音的口音明显低于非母语的语音。与基线系统相比，口音(accentedness)评分的轻微增加可能是两个因素的结果。{2}首先，AM(acoustic model)在提取PPG时不可避免地会产生识别错误，这些错误将在合成中反映为发音错误。其次，该模型没有明确地模拟重音和语调模式，因此，我们发现一些合成结果有意想不到的语调。因此，在未来的工作中，我们计划将信息整合到建模过程中；{2-1}<u>一种可能的解决方法是在训练和测试PPG-to-Mel模型时，将PPG序列置于一个标准化的F0循环(contour)中。</u></p>\n<blockquote>\n<p>{2}为什么出现口音评分反而轻微增加的情况</p>\n<p>{2}原因：模型存在AM系统识别不稳定，及没有明确对母语发音建模的问题</p>\n<p>{2-1}上述问题可能的解决方法</p>\n</blockquote>\n<p>目前，{3}PPG-to-Mel和WaveGlow模型需要非母语者至少一小时的语音。<u>可以使用多说话人TTS的迁移学习范式来减轻这一需求。</u>{4}AC的最终目标是在合成时消除对参考音的需要，即获取非母语者的语音并自动减少其口音。<u>这可以通过学习一个从非母语者的PPG序列到母语者的PPG序列的Seq2Seq的映射来实现，然后使用这个口音减少的PPG序列驱动PPG2Mel合成器。</u></p>\n<blockquote>\n<p>{3}如何简单训练数据负担 {3-1}通过一些迁移学习范式</p>\n<p>{4}如何在合成时消除对参考音的需要 {4-1}直接学习一种Seq2Seq的映射</p>\n</blockquote>\n<h3 id=\"section\"></h3>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"foreign-accent-conversion-by-synthesizing-speech-from-phonetic-posteriorgrams-2019.7\">Foreign Accent Conversion by Synthesizing Speech from Phonetic Posteriorgrams 2019.7</h2>\n<blockquote>\n<p>[译]从PPGs合成语音进行外国口音转换</p>\n<p>https://www.semanticscholar.org/paper/Foreign-Accent-Conversion-by-Synthesizing-Speech-Zhao-Ding/8386d03827eabc8446883cd16e46ef10d3d318d4</p>\n</blockquote>\n<h3 id=\"摘要\">0. 摘要</h3>\n<p>外国人口音转换(FAC)目标是生成一个语音听起来与被给的非母语者相似，但是拥有母语者的口音。过去的FAC方法在合成时借用了来自参考语句(母语)的激励信息（F0 and aperiodicity; pro-duced by a conventional vocoder）。使用这样的方法，合成的声音保留了母语者声音质量的一些方面。我们展示了一种方法，摒弃了过去使用的Vocoder与母语者的激励(excitation)。我们的方法使用一个在母语者语料上训练的声学模型用于抽取独立于说话者(Speaker-independent)的PPGs，而后训练一个语音合成器将来自非母语者的PPGs映射到对应的谱特征上，该谱特征可以通过一个高质量的神经Vocoder依次转换为声音波形。运行时，我们使用从母语者语句中抽取的PPGs作为参照驱动合成器<sup>{1}</sup>。听力测试表明，与基线系统相比，该系统产生的语音更清晰、更自然、更接近非母语者，同时显著降低了非母语者的感知外国口音。</p>\n<blockquote>\n<p>{1} 用native的PPGs训练合成器</p>\n<p>{注1}模型组成：1. 语音识别模型用于抽取非母语者的PPGs | 2. 语音合成器用于将抽取出的非母语者PPGs合成为与母语者更相似口音的谱 | 3. Vocoder</p>\n<p>{注2}训练部分：SR模型与合成器都使用native数据训练</p>\n<p>{注3}转换部分：输入non-native语音片段，得到与母语口音更相似的新片段。</p>\n</blockquote>\n<p><strong>关键字：</strong>phonetic posteriorgram, acoustic modeling, speech synthesis, accent conversion</p>\n<h3 id=\"图片\">00. 图片</h3>\n<p><img src=\"/images/FAC1.png\" /></p>\n<p><img src=\"/images/FAC2.png\" style=\"zoom: 80%;\" /></p>\n<h3 id=\"概述\">1. 概述</h3>\n<p>FAC的目标是创造一个新的声音用于被给的非母语者的音质{1}及母语者的发音模式（如，韵律和停顿）。它可以通过结合来自母语语音片段的口音相关特征<u>(accent-related cues, arc)</u>和非母语者的音质来实现。FAC可以应用于电脑辅助的发音训练，在其中充当模型声音用于模仿。</p>\n<p>FAC的主要挑战是如何从语音信号中分离arc与音质。已有多种解决方案被提出，包括语音变形[3，6-8]、帧配对[1，9]和发音合成[2，10-12]。这些方法可以减少非母语者的口音，但都有许多局限。<u>语音变形</u>合成的语音常常听起来像是不同于任何说话者的第三者说的。<u>帧配对</u>方法可以合成类似于非母语者语音的语音，但合成保留了母语者音质的某些方面；这是因为母语者的激励信息（excitation information）被用在了语音合成中。最后，<u>发音合成</u>需要专门的设备来收集发音数据，因此在实际应用中并不实用。</p>\n<blockquote>\n<p>{1} In the context of FAC, we use <strong>voice quality</strong> to refer solely the organic aspects of a speaker’s voice, e.g., pitch range, vo-cal tract dimensions.</p>\n<p>{注} FAC的三种传统方法：语音变形[3，6-8]、帧配对[1，9]和发音合成[2，10-12]</p>\n</blockquote>\n<p>在这项工作中，我们建议在不依赖说话者的语音丰富语音嵌入--语音后验图（PPGs）中执行FAC[13]。<u>PPG被定义为每一个语音帧属于一组预先定义好的音素单元 (phonemes or triphones/senones)的后验概率，其包含了语句的语言信息和语音信息。</u> 我们的方法具体工作如下。==第一步==，我们使用独立于说话者的在大型母语语音基础上训练的声学模型为非母语者生成一个PPGs。==随后，==我们构建一个Seq2Seq的语音合成器用于抓取非母语者的音质。这个合成器使用来自非母语者的PPGs序列作为输入，处理得到对应的梅尔谱图(Mel-spectrogram)作为输出。==最后，==我们训练一个神经语音编码器(Vocoder)，WaveGlow，用于将梅尔谱图转化为原始的声学信号。{!!}在测试中，我们向合成器中输入一个来自<u>母语者</u>的PPG序列。输出结果包含母语者的发音模式以及非母语者的音质。提出系统的工作流程总览见Figure 1。</p>\n<blockquote>\n<p>{!!}如果是这样的系统根本没法做到直接去使用</p>\n<p>{注} 也就是说整个训练过程都是一个对说话者音质的建模</p>\n<p>{思考}那如何对单一母语者的重音特点/发音模式建模呢？</p>\n</blockquote>\n<p>该提出的系统有三个优点。首先，它消除了从母语参考语音中借用激励信息(excitation information)的需要，从而防止了母语者语音质量的某些方面渗入到合成语音中。第二，我们的系统不需要任何训练数据来自母语的参考说话者。因此，我们可以在测试中灵活的使用任何参考语音。第三，我们的系统通过一个顺序到顺序的模型捕获上下文信息，该模型在多个任务上显示了最先进的性能，在次帮助下获得了更好的音质。</p>\n<h3 id=\"相关工作\">2. 相关工作</h3>\n<blockquote>\n<p>{机翻}</p>\n</blockquote>\n<p>口音转换的早期尝试使用语音变形[3，6-8]通过混合来自母语和非母语说话者的频谱成分来控制口音的程度。 在[18，19]中，作者使用PSOLA修改了口音语音的持续时间和音高模式。 Aryal和Gutierrez-Osuna [1]修改了语音转换（VC）技术，将动态时间规整（DTW）替换为根据声道长度归一化后基于源和目标帧的MFCC相似度来匹配源和目标帧的技术。 后来， Zhao et al. [9]使用PPG相似度代替MFCC相似度用于配对声帧。</p>\n<p>PPG已应用于许多任务，例如，基于神经网络的语音识别[20，21]，语音检测[13]，发音错误[22]和个性化TTS [23]。 PPG在VC中也引起了很多关注。 Xie et al. [24]将来自目标说话者的PPG划分为群集，然后将来自源说话者的PPG映射到目标说话者的最近群集。 Sun et al. [25]使用PPG进行多对一语音转换。 Miyoshi et al. [26]扩展了基于PPG的VC框架，以包括使用LSTM在源PPG和目标PPG之间的映射。 与不包含PPG映射过程的基准相比，他们获得了更好的语音个性评级，但音频质量较差。Zhang et al. [15]将源说话者的瓶颈特征和梅尔谱图串联起来，然后使用序列到序列模型将源梅尔谱图转换为目标说话者的谱图，最后使用WaveNet [27]恢复语音波形。 声码器。 他们的模型需要并行录音，并且需要为每个扬声器对训练一个新模型。 然后，他们应用文本监督[28]解决了转换后语音中的一些错误发音和伪影。 最近，Zhou et al. [29]采用双语PPG进行跨语言语音转换。</p>\n<h3 id=\"方法\">3. 方法</h3>\n<p>我们的系统由三个主要构建组成；一个独立于说话者的声学模型(acoustic model, AM)用于抽取PPGs，一个非母语说话者的语音合成器用于将PPGs转换为梅尔谱图，和一个WaveGlow声码器用于实施地从梅尔谱生成语音波形。</p>\n<h4 id=\"am与ppg抽取\">3.1. AM与PPG抽取</h4>\n<p>我们使用具有多个隐藏层和p范数非线性的DNN作为AM。我们在一个母语语音语料库上，通过最小化output与由一个预训练的GMM-HMM强制对准器获得的{!}senone label的交叉熵，来训练AM。在母语语音上训练对我们的任务来说是至关重要，因为母语和非母语的帧必须在母语语音空间中匹配。</p>\n<blockquote>\n<p>{!}用的是senone，(phonemes or triphones/senones)</p>\n</blockquote>\n<h4 id=\"ppg2mel\">3.2. PPG2Mel</h4>\n<p>​ 我们使用改良的Tacotron 2 [32]将来自非母语者的PPG转换为它们相应的梅尔频谱图。</p>\n<p>{1-1}原始的Tacotron 2模型采用字符(characters)的one-hot矢量表示(vector representation)，并将其传递到encoder LSTM，后者将其转换为隐藏的表示(hidden representation)，然后将其传递到具有位置敏感注意机制的decoder LSTM [33]，来预测字符的梅尔谱图。{左蓝↑4-&gt;右橙↑2,3}</p>\n<p>{1-2}为了提高模型性能，将character embedding经过多个卷积层后，再输入到enconder LSTM中。{左蓝↑1,2,3layers}</p>\n<p>{1-3}Decoder在将预测的mel谱图传递给attention之前附加一个PreNet（two fully connected layers），而后decoder LSTM提取结构信息。{右橙↑1,2}</p>\n<p>{1-4}它还在解码器之后应用了PostNet（multiple 1-D convolutional layers）用于预测频谱细节并将其添加到原始预测中。{右橙↑4}</p>\n<blockquote>\n<p>{1} Tacotron 2理论<img src=\"/images/20190212211055433.jpg\" alt=\"img\" /></p>\n</blockquote>\n<p>​ {2}在这里的工作中，我们使用(包含two fully connected hidden layers with the ReLU nonlinearity)<u>PPG-embedding network (PPG PreNet)</u>替代<u>character-embedding layer</u>。这个PPG-embedding network 与Tacotron 2中的PreNet相似，将原始输入的高维度的PPGs变换为低维度的bottleneck features。这一步对模型的收敛至关重要。PPG2Mel 转换模型详见Figure 2。</p>\n<blockquote>\n<p>{2}使用PPGs作为输入代替字符</p>\n</blockquote>\n<p>​ {3}原始的Tacotron 2 接收一个字符序列作为输入，显然这要比我们的PPG序列短。例如每一个我们语料库的句子平均包含41个字符，然而PPG序列却有几百帧。因此，原始的Tacotron 2注意机制会被如此长的输入序列所混淆，并导致PPG和声音序列之间的不一致，例如 [15]。结果，推论将是病态的，并且将产生不可理解的语音。{3-1}一种解决该问题的方法是使用更短的PPG序列训练PPG2Mel模型。例如，一种是可以用词组代替句子。然而，这种解决方法有一些问题。首先，为了获得正确的词语边界，我们需要强制对其训练的句子，这需要获取转码。第二，更重要的是，使用短片段训练进行长输入序列的预测会导致模型失败，例如[33]。</p>\n<p>​ <u>{3-2}我们通过在注意机制中添加一个局部约束来解决这个问题</u>。语音信号具有很强的时间连续性和渐进性。为来抓取语音上下文，我们只需要在局部的小窗口中观察PPGs。受此启发，在训练过程中的每一个解码步骤中，我们都将注意力机制限制为查看隐藏状态序列中的窗口，而不是查看完整序列。我们正式定义这个约束如下。定义<span class=\"math inline\">\\(d_i\\)</span>为decoder LSTM的第<span class=\"math inline\">\\(i\\)</span>步输出，<span class=\"math inline\">\\(y_i\\)</span>为预测出的声学特征(是对<span class=\"math inline\">\\(d_i\\)</span>应用线性投影后的output)，<span class=\"math inline\">\\(h = [h_1,...,h_T]\\)</span>是来自encoder的hidden states的整个序列。应用局部敏感的注意机制，我们得到，<img src=\"/home/fuu/arch/typ_tmp/f1.png\" /></p>\n<p>这里的<span class=\"math inline\">\\(s_{i-1}\\)</span>是attention LSTM第(i-1)步的hidden state，<span class=\"math inline\">\\(g_i\\)</span>是attention context,</p>\n<p><img src=\"/images/f2.png\" /></p>\n<p><img src=\"/images/f3.png\" /></p>\n<p>都是attention weights。attention scores <span class=\"math inline\">\\(e_{ij}\\)</span>计算方法如下</p>\n<p><img src=\"/images/f4.png\" /></p>\n<p>这里 <span class=\"math inline\">\\(v, W, V, U, b\\)</span> 都是attention module的可学习参数（learnable parameters）。<span class=\"math inline\">\\(F\\)</span> 包含<span class=\"math inline\">\\(k\\)</span>个一维(1-D)可学习的带有<span class=\"math inline\">\\(r\\)</span>-dims的内核，<span class=\"math inline\">\\(f_i^j ∈ R^k\\)</span> 是在<span class=\"math inline\">\\(j\\)</span> 位置上将 <span class=\"math inline\">\\(F\\)</span> 与 <span class=\"math inline\">\\(a_{i-1}\\)</span> 卷积的结果。</p>\n<p>现在，为了<u>实施局部性约束</u>，我们只考虑以当前帧为中心的固定窗口中的隐藏表示，例如：</p>\n<p><img src=\"/images/f5.png\" /></p>\n<p>这里的<span class=\"math inline\">\\(w\\)</span> 是窗口大小，接着</p>\n<p><img src=\"/images/f6.png\" /></p>\n<p>PPG2Mel模型的损失函数如下：</p>\n<p><img src=\"/images/f7.png\" /></p>\n<p>这里<span class=\"math inline\">\\(G_{mel}\\)</span> 是真实值的mel-spectrogram；<span class=\"math inline\">\\(P_{Decoder}\\)</span> 和<span class=\"math inline\">\\(P_{PostNet}\\)</span> 是分别来自decoder（after linear projection) 和PostNet。<span class=\"math inline\">\\(G_{stop}\\)</span> 是真实的stop token，<span class=\"math inline\">\\(P_{stop}\\)</span> 是预测的stop token；<span class=\"math inline\">\\(CE(∙)\\)</span> 是交叉熵损失；<span class=\"math inline\">\\(\\alpha, \\beta, \\gamma\\)</span> 控制每个损失项的相对重要性。</p>\n<blockquote>\n<p>{3}由于序列过长导致注意力机制出错</p>\n<p>{3-2}解决方法：将注意力机制限制为查看隐藏状态序列中的窗口，而不是查看完整序列</p>\n<p>{3-2}详述了attention方法的基本原理!!!</p>\n</blockquote>\n<h4 id=\"mel2speech\">3.3 Mel2speech</h4>\n<p>我们使用WaveGlow声码器将语音合成器的输出转换回语音波形。WaveGlow是一个flow-based的[35]网络，能够从mel频谱图生成高质量的语音（与Wave Net相当）。它从零均值球面高斯（方差<span class=\"math inline\">\\(\\sigma\\)</span>）中抽取与期望输出具有相同维数的样本，并将这些样本通过一系列层，这些层将简单分布转换为具有期望分布的分布。训练一个声码器的情况下，我们使用WaveGlow对mel谱图上的音频样本分布进行建模。WaveGlow只需一个神经网络就可以实现实时的推理，而WaveNet由于其自回归特性，需要很长的时间来合成一个话语。有关WaveGlow声码器的更多详细信息，请参阅[14]。</p>\n<h3 id=\"实验和结果\">4. 实验和结果</h3>\n<h4 id=\"实验步骤\">4.1 实验步骤</h4>\n<p>我们使用<u><em>Librispeech corpus</em></u>[30]来训练AM。该语料库包含960hrs的英文母语语音， 大多数是来自北美的。AM有五个隐藏层和一个有5816个senones的输出层。我们在两个来自<u><em>L2-ARCTIC</em></u>的非母语者语料上<sup>{1}</sup>训练PPG2Mel和WaveGlow模型。我们使用Audacity[36]对原始的L2-ARCTIC记录进行降噪处理，目的是去除环境背景的噪声。对于母语参考语音，我们使用了来自<u><em>ARCTIC</em></u>语料库[37]的两名北美说话者BDL（M）和CLB（F）[37]。 L2-ARCTIC和ARCTIC的每个发言者都收录了相同的一组1132个句子，或大约一个小时的演讲时间。对于每一个L2-ARCTIC的说话人，我们使用前1032个句子进行模型训练，接下来的50个句子用于验证，剩下的50个句子用于测试。所有音频信号均在16 KHz下采样。我们使用了80个滤波器组，以10ms的位移和64ms的窗口来提取mel谱图。也以10ms的位移提取PPG。</p>\n<blockquote>\n<p>{注-1} 本段说明了语料信息，和样本处理方法</p>\n<p>{1}关于非母语者语料的描述：YKWK (na-tive male Korean speaker) and ZHAA (native female Arabic speaker) from the publicly-available L2-ARCTIC corpus [34].</p>\n</blockquote>\n<p>在<strong>Table 1.</strong>中总结了<u>PPG2Mel模型</u>的参数。我们使用6的批量大小(batch size)和1×10 -4的学习率(learning rate)。 <span class=\"math inline\">\\(\\alpha,\\beta,\\gamma\\)</span> 分别根据经验设置为1.0、1.0和0.005。 注意机制的局部性约束的窗口大小 <span class=\"math inline\">\\(\\omega\\)</span> 设置为20。我们训练模型，直到验证损失达到平稳（〜8h）。</p>\n<p>对于<u>WaveGlow模型</u>，我们根据[14]的建议在训练过程中将 <span class=\"math inline\">\\(\\sigma\\)</span> 设置为0.701，在测试过程中将 <span class=\"math inline\">\\(\\sigma\\)</span> 设置为0.6。 批次大小为3，学习率为1×10 -4。 训练模型直到收敛（约一天）。 所有模型都在单个Nvidia GTX 1070 GPU上进行了训练。</p>\n<p><img src=\"/images/FACt1.png\" style=\"zoom: 67%;\" /></p>\n<p>使用Kaldi训练AM，及其他模型用PyTorch上实现，使用Adam optimizer训练。更多细节和音频样本，请参考https://github.com/guanlongzhao/fac-via-ppg。</p>\n<blockquote>\n<p>{注-2}本段说明了部分模型参数</p>\n</blockquote>\n<p>我们将提出的系统与如下构建的baseline[9]进行比较。首先，我们计算每个native和non-native frames 的PPG。然后，我们在PPG空间中只用symmetric KL divergence对最接近的native帧和non-native帧进行配对。在最后一步中，我们从帧对中提取Mel倒谱系数（MCEPs）来训练joint-density GMM（JD-GMM）spectral conversion ，如[39]所述。然后，我们使用JD-GMM转换了native MCEPs，以匹配非母语者的voice quality。最后，我们使用STRAIGHT Vocoder[40]从转换后的MCEPs结合母语者的非周期性（aperiodicity，AP）和F0（归一化为非母语者的音调范围(pitch range）来合成语音。我们在基线系统中使用了同样的1032个发音训练集。GMM包含128个混合矩阵和全协方差矩阵。我们使用24维MCEPs（不包括MCEP0）和Δ特征。所有特征均以10ms位移和25ms窗口直线提取。对于每个系统都使用说话者BDL-YKWK和CLB-ZHAA语料做重音转换。</p>\n<blockquote>\n<p>{注-3}baseline system的构建方法。</p>\n</blockquote>\n<h4 id=\"结果\">4.2 结果</h4>\n<blockquote>\n<p>[半机翻]</p>\n</blockquote>\n<p>我们进行三种听力测试来比较系统的表现： 音频质量和自然度的Mean Opinion Score (MOS) 测试，声音相似度测试，口音测试。所有测试都在Amazon Mechanical Turk上进行，所有的参与者都是美国居民。每一个测试，来自不同系统的每个说话者的25个语句对（总共50个）被随机选择。样本的出现顺序在所有实验中都是随机的。</p>\n<p>音频质量和自然度的MOS测试的分数是五分制的（1-bad, 2-poor, 3-fair, 4-good, 5-excellent）。音频质量和自然度的MOS分别描述了语音的清晰度和与人类的相似度。这两个测量是从不重叠的听众群体中获得的，以避免偏见。每个音频样本至少收到17个分数。听众还将对同一组北极和L2北极原始录音进行评分以作为参考。结果汇总在<strong>Table 2.</strong>和<strong>Table 3.</strong>中。值得注意的是，在[9]中，我们确定了基线系统的音频质量MOS比使用DTW进行帧配对的传统JD-GMM系统大约高0.4。因此，我们的基线比传统的JD-GMM更强。</p>\n<p><img src=\"/images/df.png\" style=\"zoom:67%;\" /></p>\n<p>在所有情况下，我们的系统在音质和自然度方面都明显优于基线。尽管这两个系统的音频质量MOS都要低于原始记录(语料库的原始音频)，但在自然度MOS上，无论是ARCTIC（<span class=\"math inline\">\\(p\\)</span>=0.35）还是L2-ARCTIC（<span class=\"math inline\">\\(p\\)</span>=0.54），使用双尾双样本t检验，提出的系统都没有显著差异。</p>\n<p>在语音相似性测试中，给听者提供了三个话语，即原始的非母语话语和来自两个系统的合成语，并要求他们选择哪一个合成语听起来更像非母语者。参与者还被要求在做出选择时，用7分制（1分表示完全不自信，7分表示极度自信）来评定他们的置信水平。参与者被要求在执行任务时忽略口音。在每次试验中，来自两个系统的样本的呈现顺序是平衡的，17名参与者对音频样本进行评级。结果见<strong>Table 4.</strong>。在72.47%的案例中，听者以3.4的置信水平（高于“somewhat confident”）选择提议的系统，而在其余27.53%的案例中，听者以低很多的置信评分（1.05，或“完全不置信”）选择基线系统。</p>\n<p><img src=\"/images/sf6.png\" /></p>\n<p>在口音测试中，参与者被要求用九分制（1分为非外国口音，9分为非常强的外国口音）对外国口音的程度进行评分，这是发音文献中常用的方法[43]。每个音频样本由18个人评分。结果汇总在表5中。ARCTIC 说话者的原始话语被评为“没有外国口音”（1.20），而L2-ARCTIC 说话者的原始话语被评为重口音（7.17）。基线系统（2.94）和提议的系统（3.93）与第二语言北极语相比显著降低了外国口音，但被评为比本国口音更重。令人惊讶的是，我们的系统生成的语音被评为比基线系统更重的口音；有关此结果的潜在解释，请参见讨论部分。</p>\n<p><img src=\"/images/fa6.png\" /></p>\n<h3 id=\"讨论与结论\">5. 讨论与结论</h3>\n<p>提出的AC系统处理的语音要好于基线系统，这得益于它使用了最先进的Seq2Seq模型(a modified Tacotron2)将PPGs转换为Mel-spectrograms，同时使用了一个神经声码器(neural vocoder)直接从mel谱图生成音频信号。该方法利用了语音信号的时变特性，避免了传统的基于信号处理的会降低了合成质量的声码器的使用。我们还提出了一种易于实现的注意机制的局部约束，使PPG-to-Mel模型在话语层面(utterance-level)样本上可训练。请注意，我们的MOS数值低于原始Tacotron 2和WaveGlow纸张中的MOS数值，这主要是因为它们的系统接受了24倍以上的数据训练。<u>提高系统MOS数值的一个未来方向是联合训练PPG-to-Mel和WaveGlow模型。</u>{1}</p>\n<blockquote>\n<p>{1}如何提高MOS值</p>\n</blockquote>\n<p>与从母语者那里借用激励信息（F0，AP）的基线形成对比，我们的系统直接从合成后的mel谱图中生成了非原生说话者的激励。 这样可以防止母语使用者的语音质量渗入到合成中，使合成语音与非母语使用者的音质更加相似。</p>\n<p>我们的系统从本地PPG序列中提取母语的发音模式，因此使合成语音的口音明显低于非母语的语音。与基线系统相比，口音(accentedness)评分的轻微增加可能是两个因素的结果。{2}首先，AM(acoustic model)在提取PPG时不可避免地会产生识别错误，这些错误将在合成中反映为发音错误。其次，该模型没有明确地模拟重音和语调模式，因此，我们发现一些合成结果有意想不到的语调。因此，在未来的工作中，我们计划将信息整合到建模过程中；{2-1}<u>一种可能的解决方法是在训练和测试PPG-to-Mel模型时，将PPG序列置于一个标准化的F0循环(contour)中。</u></p>\n<blockquote>\n<p>{2}为什么出现口音评分反而轻微增加的情况</p>\n<p>{2}原因：模型存在AM系统识别不稳定，及没有明确对母语发音建模的问题</p>\n<p>{2-1}上述问题可能的解决方法</p>\n</blockquote>\n<p>目前，{3}PPG-to-Mel和WaveGlow模型需要非母语者至少一小时的语音。<u>可以使用多说话人TTS的迁移学习范式来减轻这一需求。</u>{4}AC的最终目标是在合成时消除对参考音的需要，即获取非母语者的语音并自动减少其口音。<u>这可以通过学习一个从非母语者的PPG序列到母语者的PPG序列的Seq2Seq的映射来实现，然后使用这个口音减少的PPG序列驱动PPG2Mel合成器。</u></p>\n<blockquote>\n<p>{3}如何简单训练数据负担 {3-1}通过一些迁移学习范式</p>\n<p>{4}如何在合成时消除对参考音的需要 {4-1}直接学习一种Seq2Seq的映射</p>\n</blockquote>\n<h3 id=\"section\"></h3>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck5f0bbnb00052dpk716e10bg","category_id":"ck5f31qmp00062dpkfqmif8da","_id":"ck5f31qmt00092dpka12ue0bk"},{"post_id":"ck5ggwrf4000l2dpk1oa65dab","category_id":"ck5gf2cxm000b2dpk8ii384im","_id":"ck5ggwrf6000o2dpkhdf4ei4y"}],"PostTag":[{"post_id":"ck5f0bbnb00052dpk716e10bg","tag_id":"ck5f31qmr00072dpkg9ts1ytm","_id":"ck5f31qmt00082dpkgo7bass9"},{"post_id":"ck5ggwrf4000l2dpk1oa65dab","tag_id":"ck5gf2cxm000c2dpk7tw943t3","_id":"ck5ggwrf6000m2dpkhrp1d1sf"},{"post_id":"ck5ggwrf4000l2dpk1oa65dab","tag_id":"ck5gf2cxn000d2dpk23lb71hu","_id":"ck5ggwrf6000n2dpkgu30g10z"},{"post_id":"ck5ggwrf4000l2dpk1oa65dab","tag_id":"ck5gf2cxn000f2dpk2626aaye","_id":"ck5ggwrf6000p2dpkgtk9alht"},{"post_id":"ck5ggwrf4000l2dpk1oa65dab","tag_id":"ck5gf2cxn000g2dpkdn4udx6u","_id":"ck5ggwrf7000q2dpkd7mu3bk4"}],"Tag":[{"name":"Linux","_id":"ck5f31qmr00072dpkg9ts1ytm"},{"name":"accent conversion","_id":"ck5gf2cxm000c2dpk7tw943t3"},{"name":"PPGs","_id":"ck5gf2cxn000d2dpk23lb71hu"},{"name":"speech synthesis","_id":"ck5gf2cxn000f2dpk2626aaye"},{"name":"acoustic modeling","_id":"ck5gf2cxn000g2dpkdn4udx6u"}]}}